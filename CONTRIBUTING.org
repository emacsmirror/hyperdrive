#+TITLE: Hyperdrive.el contributing guidelines

* Commit messages

We aren't terribly pedantic about them, but here are some guidelines we vaguely follow:

** Prefixes

We tend to prefix our commit messages with these keywords:

+ ~Add~ :: A commit that primarily adds a new feature or code to the program.
+ ~Change~ :: A commit that primarily changes program behavior in a way that isn't necessarily fixing a bug.
+ ~Fix~ :: A commit that primarily fixes a bug in the program.
+ ~Remove~ :: A commit that primarily removes code from the program (e.g. an obsolete option or compatibility code).
+ ~Docs~ :: A commit that only changes documentation (in the manual or docstrings).
+ ~Comment~ :: A commit that only affects comments in source code.  (We try to do these in commits separate from source code changes, especially when adding TODO-type items.)
+ ~Meta~ :: A commit that makes a change to files in the repository that aren't part of the program itself (e.g. ~.gitignore~, ~Makefile~, CI configuration).
+ ~Tidy~ :: A commit that only tidies up aesthetics, indentation, whitespace, typos, etc.  A ~Tidy~ commit should be intended to /never change program behavior/ (if it were later to be found to have done so, it could be reverted without negative consequences).
+ ~Limerick~ :: /When software makes you feel down, this commit can fix your frown; but read it, you must; or be turned to dust; no, wait, that's only haiku./
+ ~Revert~ :: A commit that reverts an earlier commit.
+ ~Merge~ :: A commit that merges a branch.  (Rather than the default git ~Merge branch 'foo'~, we describe simply what the branch changes, like any other commit.)
+ ~Release~ :: A commit that marks a new versioned release.  (Generally it should only change metadata, like a version number in various places.)

As well, sometimes two keywords might be used together if the lines between them seem blurred (e.g. ~Add/Change~).

* Release checklist

These steps should be followed when releasing a new version:

1. Release new version.

   In ~master~ branch:

   1. [ ] Update package main file header version (removing ~-pre~ suffix).
   2. [ ] Update CHANGELOG (with release date and version).
   3. [ ] Rebuild .texi manual.
   4. [ ] Commit changes.

2. Commit new pre-release.

   In ~master~ branch:

   1. [ ] Update package main file header version (adding ~-pre~ suffix).
   2. [ ] Update CHANGELOG.
   3. [ ] Rebuild .texi manual.
   4. [ ] Commit changes.

* Git hooks

Please consider using the following git hooks:

- [[file:tracked-hooks/pre-commit]]

  This ~pre-commit~ hook helps ensure that the ~hyperdrive.texi~ is
  rebuilt and committed at the same time as ~hyperdrive.org~. It
  rebuilds ~.texi~ whenever ~.org~ is about to be committed, and it
  prevents ~.org~ from being committed while ~.texi~ has unstaged changes.
