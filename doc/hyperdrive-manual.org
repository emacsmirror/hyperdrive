#+title: Hyperdrive.el User Manual
#+subtitle: Release {{{version}}}
#+author: Joseph Turner and Adam Porter
#+language: en
#+setupfile: doc-setup.org

# #+export_file_name: hyperdrive.texi

#+texinfo_dir_category: Communication
#+texinfo_dir_title: Hyperdrive.el
#+texinfo_dir_desc: P2P filesystem in Emacs

This manual is for ~hyperdrive.el~ version {{{version}}}.

Copyright \copy 2023 USHIN, Inc.

#+begin_quote
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover Texts being "A GNU Manual,"
and with the Back-Cover Texts as in (a) below.  A copy of the license
is included in the section entitled "GNU Free Documentation License."

(a) The FSF's Back-Cover Text is: "You have the freedom to copy and
modify this GNU manual."
#+end_quote

* Introduction

[[https://docs.holepunch.to/building-blocks/hyperdrive][Hyperdrive]] is a secure, P2P, real-time, local-first, versioned
filesystem designed for easy peer-to-peer file sharing. ~hyperdrive.el~
is an independent project built by [[https://ushin.org][USHIN]] which provides an Emacs
interface for managing hyperdrives.

~hyperdrive.el~ is in early development. If something breaks, please see
the [[*Troubleshooting][troubleshooting section]].

* Installation

~hyperdrive.el~ is available on
[[https://melpa.org/#/getting-started][MELPA]]. Once you've set up
MELPA, you can run ~M-x package-install RET hyperdrive RET~.

** ~hyper-gateway~

~hyperdrive.el~ relies on
[[https://github.com/RangerMauve/hyper-gateway/][hyper-gateway]] for
talking to the hypercore network
([[https://github.com/RangerMauve/hyper-gateway#how-do-i-install-hyper-gateway][installation
instructions]]).

* Usage

*Be careful what you publish!* Anyone with your public key can download
your published files from you, your friend, or anyone else who has
them.

** Start/stop the gateway

To connect with peers, you'll need to start ~hyper-gateway~. If you
[[https://github.com/RangerMauve/hyper-gateway#how-do-i-run-hyper-gateway-as-a-background-process-on-gnulinux--systemd][install ~hyper-gateway~ as a SystemD
service]],
you can connect and disconnect from the network with ~M-x
hyperdrive-start~ and ~M-x hyperdrive-stop~. Otherwise, follow [[https://github.com/RangerMauve/hyper-gateway#usage][these
instructions]] to
run ~hyper-gateway~ manually.

** Create a hyperdrive

You can have multiple hyperdrives, each one containing its own set of
files. Run ~M-x hyperdrive-new~ then type in a ~seed~ to create a new
hyperdrive. That seed will be combined with your secret master key,
which is generated for you by ~hyper-gateway~, to produce a public key
that uniquely identifies that hyperdrive. ~hyperdrive-new~ is
idempotent since the same seed will always produce the same public
key. For this reason, a hyperdrive's seed cannot be changed.

** Open a hyperdrive

You can open a hyperdrive folder or file by pasting in a ~hyper://~
URL after ~M-x hyperdrive-open-url~. Alternatively, ~M-x
hyperdrive-find-file~ remembers hyperdrives you have already created
or visited. It will prompt you to select a known hyperdrive by its
public key or seed and then enter a path inside that hyperdrive.

The following keybindings are available inside the directory view by
default:

- ~n~ and ~p~ move between entries
- ~RET~ opens file or directory at point
- ~^~ goes up to the parent directory
- ~d~ downloads the file at point to disk
- ~D~ deletes the file or directory (recursively) at point
- ~w~ copies the URL of the file or directory at point
- ~?~ opens a buffer describing the current hyperdrive

** Write to a hyperdrive

You can write a buffer to a hyperdrive with ~hyperdrive-write-buffer~,
which will prompt you for one of hyperdrives you have created as well
as the path in that hyperdrive where you want to store the file. If
you are editing an existing hyperdrive file, ~hyperdrive-save-buffer~
will silently update the current hyperdrive entry with the new content.

** Link to a hyperdrive

In addition to copying the URL at point in the directory view, you can
run ~hyperdrive-copy-url~ to copy the URL of the current hyperdrive
file or directory. If the current file is an org-mode file,
~org-store-link~ will store a link to the hyperdrive file, and if
point is inside a heading, its ~CUSTOM_ID~, ~ID~, or heading text will
be appended to the stored URL.

** Share a hyperdrive

Only you can load one of your created hyperdrives by its seed. When
sharing a hyperdrive with someone else, you will need to copy its full
URL. Peers can load your hyperdrive files directly from your computer
or from other peers who previously loaded those files.

It is possible to use [[https://dnslink.io/][DNSLink]] to link to a
hyperdrive with a domain name instead of a public key, like
~hyper://example.org/path/to/file~. Create a TXT record at
~_dnslink.example.org~ with the contents ~/hyper/PUBLIC-KEY~ (no
trailing slash). Note: relying on DNS adds another point of
centralization, reducing the durability of your link. ~hyperdrive.el~
somewhat mitigates this issue by remembering which public key the DNS
record resolved to, so that peers can use the stored public key itself
for subsequent connections.

** Describe a hyperdrive

To see information about a hyperdrive, such as its public key, seed,
petname, nickname, domains, writable, or other metadata, run
~hyperdrive-describe-hyperdrive~.

# TODO: xref to naming section when done

** Bookmark a hyperdrive

You can use the built-in ~bookmark-set~ and ~bookmark-jump~ functions
to store and jump to a hyperdrive file or directory.

** Download hyperdrive files

You can download a hyperdrive file to your local filesystem. Download
the current hyperdrive file with ~hyperdrive-download-entry~ or paste
in a ~hyper://~ URL after ~hyperdrive-download-url~.

** Upload files from your filesystem

To upload a single file from your filesystem, use
~hyperdrive-upload-file~. By default, the selected file will be placed
in your hyperdrive's root directory, but you can edit the filepath
before uploading.

~hyperdrive-upload-files~ lets you upload multiple files from your
filesystem to a hyperdrive. As with the ~cp~ command, uploaded files
will be placed into the same TARGET-DIRECTORY.

*** Mirror a whole directory

~hyperdrive-mirror~ uploads a directory, mirroring its subdirectory
structure in your hyperdrive.

Let's say you have some files on your filesystem in the ~~/blog/~
directory, and you want to upload them all into a hyperdrive you
already created with the petname "foo". The following snippet will
show you the list of files which will be uploaded as well as the ~hyper~
URL at which they will be available after upload. To perform the
upload, remove ~:dry-run t~.

#+begin_src elisp
(hyperdrive-mirror "~/blog/" (hyperdrive-by-slot 'petname "foo")
                   :target-dir "/blog/" :dry-run t)
#+end_src

*** Mirror files by tag or other attributes

~hyperdrive-mirror~ can accept a ~PREDICATE~ argument, which you can use
to upload only certain files.

Let's say that you have some files on your filesystem in the ~~/blog/~
directory, but you only want to upload those files which have been
tagged as "public" using Protesilaos Stavrou's [[https://protesilaos.com/emacs/denote][Denote]] file-naming
scheme.

The following snippet includes a ~PREDICATE~ key whose value is a
regular expression against which every expanded filename inside will
be tested.

Remove ~:dry-run t~ to perform the upload.

#+begin_src elisp
(hyperdrive-mirror "~/blog/" (hyperdrive-by-slot 'petname "foo")
                   :target-dir "/blog/"
                   :predicate ".*_public.*"
                   :dry-run t)
#+end_src

Alternatively, you could select files by tag with Karl Voit's
[[https://github.com/novoid/filetags/][filetags]]. Either way allows for a "non-splitting" approach where
public and private files exist in the same directory.

~PREDICATE~ may also be a function, which receives the expanded filename
as its only argument. The following snippet will mirror only those
files in ~~/blog/~ which are smaller than 5MB:

#+begin_src elisp
(hyperdrive-mirror "~/blog/" (hyperdrive-by-slot 'petname "foo")
                   :target-dir "/blog/"
                   :predicate (lambda (file) (> (* 5 1024 1024)
                                              (file-attribute-size (file-attributes file))))
                   :dry-run t)
#+end_src

* Concepts

** Hyper-gateway

[[https://github.com/RangerMauve/hyper-gateway/][Hyper-gateway]] handles
interactions with hyperdrive under the hood, and it runs a local HTTP
server which accepts HTTP requests. In `hyperdrive.el`, P2P
interactions consist mostly of, e.g., `GET` requests to download files
and `PUT` requests to write files to a hyperdrive.

** Sparse replication

[[https://docs.holepunch.to/building-blocks/hyperdrive][Hyperdrive]] is
sparsely replicated, meaning that peers can download particular files
from a hyperdrive without having to get the whole drive. This reduces
both load times and disk usage.

** Hyperdrive entries

Instead of files and folders, Hyperdrive has entries and entry
prefixes. It's possible for a "file" entry and a "folder" entry prefix
to have the same name, like `hyper://PUBLIC-KEY/path/to/` (a
"directory") and `hyper://PUBLIC-KEY/path/to` (a "file"). In this
case, the directory listing for `hyper://PUBLIC-KEY/path/` would
display the `to` entry but not the `to/` entry prefix. Because entry
prefixes only exist when they prefix an entry, deleting the last
"file" in a "directory" causes the "directory" to disappear as well.
When a hyperdrive "file" or "directory" is not found, `hyperdrive.el`
prompts to go to the parent "directory."

** Versioning

Hyperdrives are versioned, meaning that it is possible to explore a
hyperdrive as it was in the past. Version numbers indicate the
hyperdrive's version. For example, ~hyper://PUBLIC-KEY/$/version/50/~
refers to the fiftieth version of the hyperdrive identified by
~PUBLIC-KEY~. Loading a hyperdrive entry without specifying a version
number always loads the most recent version of that hyperdrive. If you
pass ~hyper://PUBLIC-KEY/foo.org~ to ~hyperdrive-open-url~, ~hyperdrive.el~
will always attempt to find ~/foo.org~ inside the latest version of that
hyperdrive.

Whenever you update an entry, the hyperdrive's version number gets
incremented by 1. This is because the version number tells you how
many times the hyperdrive has been modified, not how many times a
particular entry has been modified. For example, let's say that the
current version of your hyperdrive at ~hyper://PUBLIC-KEY/~ is 50. If
you add a new entry at ~hyper://PUBLIC-KEY/bar.org~, the latest version
of your hyperdrive will become 51.

Since ~/bar.org~ did not exist before version 51, ~hyperdrive.el~ should
warn you that nothing exists at
~hyper://PUBLIC-KEY/$/version/50/bar.org~. If you add another file
~hyper://PUBLIC-KEY/quux.org~, your hyperdrive's latest version will
become 52. For the moment, ~hyper://PUBLIC-KEY/bar.org~,
~hyper://PUBLIC-KEY/$/version/51/bar.org~, and
~hyper://PUBLIC-KEY/$/version/52/bar.org~, all point to the same
version of ~/bar.org~. If you then make a change to ~/bar.org~, your
hyperdrive's latest version will become 53. Now
~hyper://PUBLIC-KEY/bar.org~ and
~hyper://PUBLIC-KEY/$/version/53/bar.org~ will point to the latest
version of ~/bar.org~, while the 51- and 52-versioned URLs will continue
to point to the original version.

If you delete ~/bar.org~, ~hyper://PUBLIC-KEY/bar.org~ will not point to
anything, but the versioned URLs will still work.

Since only the current version of a hyperdrive entry can be updated,
~hyperdrive.el~ sets the buffer to read-only whenever a version number
is specified in a hyper URL.

* Troubleshooting

If you run into issues, please first try resetting the value of
`hyperdrive-hyperdrives`:

#+begin_src elisp
(progn
  (setf hyperdrive-hyperdrives (make-hash-table :test #'equal))
  (persist-save 'hyperdrive-hyperdrives))
#+end_src

Please ensure that your version of `hyper-gateway` (`M-x
hyperdrive-hyper-gateway-version`) is the latest version
([[https://github.com/RangerMauve/hyper-gateway/releases/][releases]]).

* Bugs and Patches

Bugs can be submitted to the [[https://todo.sr.ht/~ushin/ushin][ushin issue
tracker]]. Patches,
comments or questions can be submitted to the [[https://lists.sr.ht/~ushin/ushin][ushin public
inbox]].

* Acknowledgments

[[https://github.com/alphapapa/][Adam Porter]] for rewriting
`hyperdrive.el` and for his work on `plz.el`.

[[https://mauve.moe/][Mauve Signweaver]] for their guidance into the
world of p2p as well as the development of `hyper-gateway`.

[[https://protesilaos.com][Protesilaos Stavrou]] for design input and user-testing ~hyperdrive.el~.

[[https://karl-voit.at/][Karl Voit]] for his feedback, especially the
suggestion that we allow for a non-splitting approach for uploading
files from the filesystem.

* GNU Free Documentation License

#+include: fdl.org

* Indices

** Keystroke index
:PROPERTIES:
:INDEX: ky
:END:

** Function index
:PROPERTIES:
:INDEX: fn
:END:

** Variable index
:PROPERTIES:
:INDEX: vr
:END:

** Concept index
:PROPERTIES:
:INDEX: cp
:END:
