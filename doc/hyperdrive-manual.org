#+title: Hyperdrive.el User Manual
#+subtitle: Release {{{version}}}
#+author: Joseph Turner and Adam Porter
#+language: en
#+setupfile: doc-setup.org

# #+export_file_name: hyperdrive.texi

#+texinfo_dir_category: Communication
#+texinfo_dir_title: Hyperdrive.el
#+texinfo_dir_desc: P2P filesystem in Emacs

This manual is for ~hyperdrive.el~ version {{{version}}}.

Copyright \copy 2023 USHIN, Inc.

#+begin_quote
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover Texts being "A GNU Manual,"
and with the Back-Cover Texts as in (a) below.  A copy of the license
is included in the section entitled "GNU Free Documentation License."

(a) The FSF's Back-Cover Text is: "You have the freedom to copy and
modify this GNU manual."
#+end_quote

* Introduction

[[https://docs.holepunch.to/building-blocks/hyperdrive][Hyperdrive]] is a P2P, real-time, local-first, versioned filesystem
designed for easy peer-to-peer file sharing.  ~hyperdrive.el~ is an
independent project built by [[https://ushin.org][USHIN]] which provides an Emacs interface
for managing hyperdrives.

~hyperdrive.el~ is in early development. If something breaks, please [[*Troubleshooting]].

* Installation

~hyperdrive.el~ is available on
[[https://melpa.org/#/getting-started][MELPA]]. Once you've set up
MELPA, you can run ~M-x package-install RET hyperdrive RET~.

** ~hyper-gateway~

~hyperdrive.el~ relies on
[[https://github.com/RangerMauve/hyper-gateway/][hyper-gateway]] for
talking to the hypercore network
([[https://github.com/RangerMauve/hyper-gateway#how-do-i-install-hyper-gateway][installation
instructions]]).

* Usage

*Be careful what you publish!* Anyone with your public key can download
your published files from you, your friend, or anyone else who has
them.

** Start/stop the gateway
#+findex: hyperdrive-start
#+findex: hyperdrive-stop

To connect with peers, you'll need to start ~hyper-gateway~. If you
[[https://github.com/RangerMauve/hyper-gateway#how-do-i-run-hyper-gateway-as-a-background-process-on-gnulinux--systemd][install ~hyper-gateway~ as a SystemD
service]],
you can connect and disconnect from the network with ~M-x
hyperdrive-start~ and ~M-x hyperdrive-stop~. Otherwise, follow [[https://github.com/RangerMauve/hyper-gateway#usage][these
instructions]] to
run ~hyper-gateway~ manually.

** Create a hyperdrive
#+findex: hyperdrive-new

You can have multiple hyperdrives, each one containing its own set of
files. Run ~M-x hyperdrive-new~ then type in a ~seed~ ([[*Seeds]]) to
create a new hyperdrive. That seed will be combined with your secret
master key, which is generated for you by ~hyper-gateway~, to produce a
public key ([[*Public keys]]) that uniquely identifies that
hyperdrive. ~hyperdrive-new~ is idempotent since the same seed will
always produce the same public key. For this reason, a hyperdrive's
seed cannot be changed.

** Open a hyperdrive
#+findex: hyperdrive-open-url
#+findex: hyperdrive-find-file

You can open a hyperdrive folder or file by pasting in a ~hyper://~ URL
after ~M-x hyperdrive-open-url~. Alternatively, ~M-x hyperdrive-find-file~
remembers hyperdrives you have already created or visited. It will
prompt you to select a known hyperdrive by its public key or seed and
then enter a path inside that hyperdrive.

The following keybindings are available inside the directory view by
default:

#+kindex: hyperdrive-dir-previous
#+kindex: hyperdrive-dir-next
- ~n~ and ~p~ move between entries
#+kindex: hyperdrive-dir-find-file
- ~RET~ opens file or directory at point
#+kindex: hyperdrive-up
- ~^~ goes up to the parent directory
#+kindex: hyperdrive-dir-download-file
- ~d~ downloads the file at point to disk
#+kindex: hyperdrive-dir-delete
- ~D~ deletes the file or directory (recursively) at point
#+kindex: hyperdrive-dir-copy-url
- ~w~ copies the URL of the file or directory at point
#+kindex: hyperdrive-describe-hyperdrive
- ~?~ opens a buffer describing the current hyperdrive

** Write to a hyperdrive
#+findex: hyperdrive-write-buffer

You can write a buffer to a hyperdrive with ~hyperdrive-write-buffer~,
which will prompt you for one of hyperdrives you have created as well
as the path in that hyperdrive where you want to store the file. If
you are editing an existing hyperdrive file, ~save-buffer~ will
silently update the current hyperdrive entry with the new content.

** Link to a hyperdrive
#+findex: hyperdrive-copy-url
#+findex: hyperdrive-dir-copy-url

In the directory view, you can copy the URL at point with
~hyperdrive-dir-copy-url~. Additionally, you can run ~hyperdrive-copy-url~
to copy the URL of the current hyperdrive file or directory. If the
current file is an org-mode file, ~org-store-link~ will store a link to
the hyperdrive file, and if point is inside a heading, its ~CUSTOM_ID~,
~ID~, or heading text will be appended to the stored URL.

** Describe a hyperdrive
#+findex: hyperdrive-describe-hyperdrive

To see information about a hyperdrive, such as its public key, seed,
petname, nickname, domains, writable, or other metadata, run
~hyperdrive-describe-hyperdrive~. For more on what this information
means, [[*Naming]].

** Bookmark a hyperdrive
#+findex: hyperdrive-bookmark-jump
#+findex: hyperdrive-bookmark-list

You can use the built-in ~bookmark-set~, ~bookmark-jump~, and
~bookmark-list~ functions to store and jump to a hyperdrive file or
directory. To jump to or view only hyperdrive bookmarks, use
~hyperdrive-bookmark-jump~ and ~hyperdrive-bookmark-list~.

** Download hyperdrive files
#+findex: hyperdrive-download-entry
#+findex: hyperdrive-download-url

You can download a hyperdrive file to your local filesystem. Download
the current hyperdrive file with ~hyperdrive-download-entry~ or paste
in a ~hyper://~ URL after ~hyperdrive-download-url~.

** Upload files from your filesystem
#+findex: hyperdrive-upload-file
#+findex: hyperdrive-upload-files

To upload a single file from your filesystem, use
~hyperdrive-upload-file~. By default, the selected file will be placed
in your hyperdrive's root directory, but you can edit the filepath
before uploading.

~hyperdrive-upload-files~ lets you upload multiple files from your
filesystem to a hyperdrive. As with the ~cp~ command, uploaded files
will be placed into the same TARGET-DIRECTORY.

*** Mirror a whole directory
#+findex: hyperdrive-mirror
#+findex: hyperdrive-mirror-do-upload

~hyperdrive-mirror~ uploads a directory, mirroring its subdirectory
structure in your hyperdrive.

Let's say you have some files on your filesystem in the ~~/blog/~
directory, and you want to upload them all into a hyperdrive you
already created with the petname "foo". The following snippet will
show you the list of files which will be uploaded as well as the ~hyper~
URL at which they will be available after upload. To upload the files,
run ~hyperdrive-mirror-do-upload~ (bound to ~C-c C-c~ by default) in the
~*hyperdrive-mirror*~ buffer which opens.

#+begin_src elisp
(hyperdrive-mirror "~/blog/" (hyperdrive-by-slot 'petname "foo")
                   :target-dir "/blog/")
#+end_src

To upload the same files without confirming, add ~:no-confirm t~.

*** Mirror files by tag or other attributes

~hyperdrive-mirror~ can accept a ~PREDICATE~ argument, which you can use
to upload only certain files.

Let's say that you have some files on your filesystem in the ~~/blog/~
directory, but you only want to upload those files which have been
tagged as "public" using Protesilaos Stavrou's [[https://protesilaos.com/emacs/denote][Denote]] file-naming
scheme.

The following snippet includes a ~PREDICATE~ key whose value is a
regular expression against which every expanded filename inside will
be tested.

#+begin_src elisp
(hyperdrive-mirror "~/blog/" (hyperdrive-by-slot 'petname "foo")
                   :target-dir "/blog/"
                   :predicate ".*_public.*")
#+end_src

Alternatively, you could select files by tag with Karl Voit's
[[https://github.com/novoid/filetags/][filetags]]. Either way allows for a "non-splitting" approach where
public and private files exist in the same directory.

~PREDICATE~ may also be a function, which receives the expanded filename
as its only argument. For example, the following snippet will mirror
only those files in ~~/blog/~ which are smaller than 5MB:

#+begin_src elisp
(hyperdrive-mirror "~/blog/" (hyperdrive-by-slot 'petname "foo")
                   :target-dir "/blog/"
                   :predicate (lambda (file) (> (* 5 1024 1024)
                                              (file-attribute-size (file-attributes file)))))
#+end_src

*** Non-interactive use
#+findex: hyperdrive-by-slot

In writing your own functions to extend ~hyperdrive.el~, you can use
~hyperdrive-by-slot~ to access a hyperdrive entry by its seed, petname,
or public key.

For examples, [[*Mirror a whole directory]] and [[*Mirror files by tag or
other attributes]].

* Concepts

** Hyperdrive

Hyperdrive is a virtual filesystem which you can use to share files on
the peer-to-peer (P2P) ~hyper~ network.  It's a special folder with a
long, unique link starting with ~hyper://~ that you can put files into
and other peers can pull files out of (if they have the link).

Anyone with that link can download its contents directly from your
computer.  There's no need to make an account or rely on a third party
to pass the data along.  What's more, anyone who has a copy of the
content in your hyperdrive can serve it to others.  This means that
your hyperdrive can circulate on the ~hyper~ network even when you're
offline.

Hyperdrive is single-writer, since only one peer (one machine) can
make changes to a hyperdrive.  No one can pretend to be you, since
files in a hyperdrive are cryptographically signed to ensure their
integrity and authenticity

You can make as many hyperdrives as you like; the only limitation is
your own disk space.

Hyperdrive is offline-first, since you can view files which
were previously downloaded even when disconnected from the rest of the
network.  It's also local-first, since you can connect with peers on a
LAN even without an internet connection.

Unlike BitTorrent, another protocol for sharing files, hyperdrives are
mutable.  You can add, update, or delete files inside a hyperdrive,
and peers will be able to access the latest version of the hyperdrive
at the same link.  However, old versions of your hyperdrive are never
lost. [[*Versioning]] for more information.

*** Sparse replication
#+cindex: Sparse replication

[[https://docs.holepunch.to/building-blocks/hyperdrive][Hyperdrive]] is sparsely replicated, meaning that peers can download
particular files from a hyperdrive without having to get the whole
drive. This reduces both load times and disk usage.

*** Versioning
#+cindex: Versioning

Hyperdrives are versioned, meaning that it is possible to explore a
hyperdrive as it was in the past. Version numbers indicate the
hyperdrive's version. For example, ~hyper://PUBLIC-KEY/$/version/50/~
refers to the fiftieth version of the hyperdrive identified by
~PUBLIC-KEY~. Loading a hyperdrive entry without specifying a version
number always loads the most recent version of that hyperdrive. If you
pass ~hyper://PUBLIC-KEY/foo.org~ to ~hyperdrive-open-url~, ~hyperdrive.el~
will always attempt to find ~/foo.org~ inside the latest version of that
hyperdrive.

Whenever you update an entry, the hyperdrive's version number gets
incremented by 1. The version number tells you how many times the
hyperdrive has been modified, not how many times a particular entry
has been modified. For example, let's say that the current version of
your hyperdrive at ~hyper://PUBLIC-KEY/~ is 50. If you add a new entry
at ~hyper://PUBLIC-KEY/bar.org~, the latest version of your hyperdrive
will become 51.

Since ~/bar.org~ did not exist before version 51, ~hyperdrive.el~ should
warn you that nothing exists at
~hyper://PUBLIC-KEY/$/version/50/bar.org~. If you add another file
~hyper://PUBLIC-KEY/quux.org~, your hyperdrive's latest version will
become 52. For the moment, ~hyper://PUBLIC-KEY/bar.org~,
~hyper://PUBLIC-KEY/$/version/51/bar.org~, and
~hyper://PUBLIC-KEY/$/version/52/bar.org~, all point to the same
version of ~/bar.org~. If you then make a change to ~/bar.org~, your
hyperdrive's latest version will become 53. Now
~hyper://PUBLIC-KEY/bar.org~ and
~hyper://PUBLIC-KEY/$/version/53/bar.org~ will point to the latest
version of ~/bar.org~, while the 51- and 52-versioned URLs will continue
to point to the original version.

If you delete ~/bar.org~, ~hyper://PUBLIC-KEY/bar.org~ will no longer
point to anything, but the versioned URLs will still work.

Since only the current version of a hyperdrive entry can be updated,
~hyperdrive.el~ sets the buffer to read-only whenever a version number
is specified in a hyper URL.

** Hyper-gateway
#+cindex: Hyper-gateway

[[https://github.com/RangerMauve/hyper-gateway/][Hyper-gateway]] handles interactions with hyperdrive under the hood, and
it runs a local HTTP server which offers a Fetch API to access the
Hyperdrive network. In `hyperdrive.el`, P2P interactions consist
mostly of, e.g., `GET` requests to download files and `PUT` requests
to write files to a hyperdrive.

** Naming
#+cindex: Naming

Inspired by Marc Stiegler's [[http://www.skyhunter.com/marcs/petnames/IntroPetNames.html][An Introduction to Petname Systems]],
~hyperdrive.el~ names drives in a three different ways:

- Public key :: public, globally unique, not human-memorable
- Nickname   :: public, not necessarily unique, human-memorable
- Petname    :: private, locally unique, human-memorable

If ~hyperdrive.el~ is like a phonebook, then public keys are phone
numbers, nicknames are how your contacts introduce themselves, and
petnames are the names you actually write down.

Each drive may also have one or both of the following attributes:

- Seed       :: string used to generate public key
- DNS domain :: public, globally unique, human-memorable

#+vindex: hyperdrive-default-host-format
You can customize the default format for displaying hyperdrives with
~hyperdrive-default-host-format~.

*** Public keys
#+cindex: Public keys
#+findex: hyperdrive-new

Public keys are 52-character-long, [[https://en.wikipedia.org/wiki/Base32#z-base-32][z-base-32]] encoded keys generated
from your secret master key and a seed string. ~hyper-gateway~ generates
the secret key for you, and you provide a seed ([[*Seeds]]) when
generating a new drive with ~hyperdrive-new~.

Public keys allow for permanent links to hyperdrive content. When
sharing a hyperdrive with someone else, you will need to copy its full
URL. Peers can load your hyperdrive files directly from your computer
or from other peers who previously loaded those files.

*** Nicknames
#+cindex: Nicknames
#+findex: hyperdrive-set-nickname

Nicknames are public, memorable names which users can give to their
own hyperdrives. Other users can see the nicknames you give to your
hyperdrives.

Nicknames are stored in each hyperdrive inside
~/.well-known/host-meta.json~ under the ~name~ key, as specified in
RFC6415. You can only assign a nickname to hyperdrives which you have
created. Nicknames can be changed with ~hyperdrive-set-nickname~.

*** Petnames
#+cindex: Petnames
#+findex: hyperdrive-set-petname

Petnames are locally unique hyperdrive identifiers. You can give a
petname to any hyperdrive you load, whether you created it or not.

When creating a new drive, your chosen seed ([[*Seeds]]) is used as its
petname by default. Petnames can be changed with
~hyperdrive-set-petname~, but drives cannot share a petname.

*** Seeds
#+cindex: Seeds

Along with your secret master key, seeds are used to generate public
keys ([[*Public keys]]). A seed has a one-to-one relationship with a
drive. Seeds are local but not secret. To share a drive, you must use
a public key or DNS domain ([[*DNS domains]]).

*** DNS domains
#+cindex: DNS domains

It is possible to use [[https://dnslink.io/][DNSLink]] to link to a hyperdrive with a domain
name instead of a public key ([[*Public keys]]), like
~hyper://example.org/path/to/file~. Create a TXT record at
~_dnslink.example.org~ with the contents ~/hyper/PUBLIC-KEY~ (no trailing
slash). Note: relying on DNS adds another point of centralization,
reducing the durability of your link. ~hyperdrive.el~ somewhat mitigates
this issue by remembering which public key the DNS record resolved to,
so that peers can use the stored public key itself for subsequent
connections.

** Hyperdrive entries
#+cindex: Entries

Instead of files and folders, Hyperdrive technically has entries and
entry prefixes. It's possible for a "file" entry and a "folder" entry
prefix to have the same name, like `hyper://PUBLIC-KEY/path/to/` (a
"directory") and `hyper://PUBLIC-KEY/path/to` (a "file"). In this
case, the directory listing for `hyper://PUBLIC-KEY/path/` would
display the `to` entry but not the `to/` entry prefix. Because entry
prefixes only exist when they prefix an entry, deleting the last
"file" in a "directory" causes the "directory" to disappear as well.
When a hyperdrive "file" or "directory" is not found, `hyperdrive.el`
prompts to go to the parent "directory."

* Troubleshooting

If you run into issues, please first try resetting the value of
`hyperdrive-hyperdrives`:

#+begin_src elisp
(progn
  (setf hyperdrive-hyperdrives (make-hash-table :test #'equal))
  (persist-save 'hyperdrive-hyperdrives))
#+end_src

Please ensure that your version of `hyper-gateway` (`M-x
hyperdrive-hyper-gateway-version`) is the latest version
([[https://github.com/RangerMauve/hyper-gateway/releases/][releases]]).

* Bugs and Patches

Bugs can be submitted to the [[https://todo.sr.ht/~ushin/ushin][ushin issue
tracker]]. Patches,
comments or questions can be submitted to the [[https://lists.sr.ht/~ushin/ushin][ushin public
inbox]].

* Acknowledgments

[[https://github.com/alphapapa/][Adam Porter]] for rewriting
`hyperdrive.el` and for his work on `plz.el`.

[[https://mauve.moe/][Mauve Signweaver]] for their guidance into the
world of p2p as well as the development of `hyper-gateway`.

[[https://protesilaos.com][Protesilaos Stavrou]] for design input and user-testing ~hyperdrive.el~.

[[https://karl-voit.at/][Karl Voit]] for his feedback, especially the
suggestion that we allow for a non-splitting approach for uploading
files from the filesystem.

* GNU Free Documentation License

#+include: fdl.org

* Indices

** Keystroke index
:PROPERTIES:
:INDEX: ky
:END:

** Function index
:PROPERTIES:
:INDEX: fn
:END:

** Variable index
:PROPERTIES:
:INDEX: vr
:END:

** Concept index
:PROPERTIES:
:INDEX: cp
:END:

# Local Variables:
# sentence-end-double-space: t
# End:
