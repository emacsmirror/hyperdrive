#+title: Hyperdrive.el User Manual
#+subtitle: Release {{{version}}}
#+author: Joseph Turner and Adam Porter
#+language: en
#+setupfile: doc-setup.org

#+texinfo_dir_category: Communication
#+texinfo_dir_title: Hyperdrive.el
#+texinfo_dir_desc: P2P filesystem in Emacs

[[https://docs.holepunch.to/building-blocks/hyperdrive][Hyperdrive]] is a P2P, real-time, local-first, versioned filesystem
designed for easy peer-to-peer file sharing.  ~hyperdrive.el~ is an
independent project built by [[https://ushin.org][USHIN]] which provides an Emacs interface
for managing hyperdrives.

~hyperdrive.el~ is in early development. If something breaks, please see
[[*Troubleshooting]].

- Homepage: https://ushin.org/hyperdrive-manual.html
- Repository: https://git.sr.ht/~ushin/hyperdrive.el

This manual is for ~hyperdrive.el~ version {{{version}}}.

* Copying

Copyright \copy 2023 USHIN, Inc.

#+begin_quote
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover Texts being "A GNU Manual,"
and with the Back-Cover Texts as in (a) below.  A copy of the license
is included in the section entitled "GNU Free Documentation License."

(a) The FSF's Back-Cover Text is: "You have the freedom to copy and
modify this GNU manual."
#+end_quote

* Installation

~hyperdrive.el~ requires [[https://www.gnu.org/software/emacs/][Emacs]] version 27.1 or later.

~hyperdrive.el~ is available on
[[https://melpa.org/#/getting-started][MELPA]]. Once you've set up
MELPA, you can run ~M-x package-install RET hyperdrive RET~.

** hyper-gateway

~hyperdrive.el~ relies on
[[https://github.com/RangerMauve/hyper-gateway/][hyper-gateway]] for
talking to the hypercore network
([[https://github.com/RangerMauve/hyper-gateway#how-do-i-install-hyper-gateway][installation
instructions]]).

* Usage

*Be careful what you publish!* Anyone with your public key can download
your published files from you, your friend, or anyone else who has
them.

** Start/stop the gateway
#+findex: hyperdrive-start
#+findex: hyperdrive-stop

To connect with peers, you'll need to start ~hyper-gateway~. If you
[[https://github.com/RangerMauve/hyper-gateway#how-do-i-run-hyper-gateway-as-a-background-process-on-gnulinux--systemd][install ~hyper-gateway~ as a SystemD
service]],
you can connect and disconnect from the network with ~M-x
hyperdrive-start~ and ~M-x hyperdrive-stop~. Otherwise, follow [[https://github.com/RangerMauve/hyper-gateway#usage][these
instructions]] to
run ~hyper-gateway~ manually.

** Create a hyperdrive
#+findex: hyperdrive-new

You can have multiple hyperdrives, each one containing its own set of
files. Run ~M-x hyperdrive-new~ then type in a ~seed~ (see [[*Seeds]]) to
create a new hyperdrive. That seed will be combined with your secret
master key, which is generated for you by ~hyper-gateway~, to produce a
public key (see [[*Public keys]]) that uniquely identifies that
hyperdrive. ~hyperdrive-new~ is idempotent since the same seed will
always produce the same public key. For this reason, a hyperdrive's
seed cannot be changed.

** Open a hyperdrive
#+findex: hyperdrive-open-url
#+findex: hyperdrive-find-file

You can open a hyperdrive folder or file by pasting in a ~hyper://~ URL
after ~M-x hyperdrive-open-url~. Alternatively, ~M-x hyperdrive-find-file~
remembers hyperdrives you have already created or visited. It will
prompt you for a known hyperdrive and a path inside it.

*** Directory view

The following keybindings are available inside the directory view by
default:

#+kindex: hyperdrive-dir-previous
#+kindex: hyperdrive-dir-next
- ~n~ and ~p~ move between entries
#+kindex: hyperdrive-dir-find-file
- ~RET~ opens file or directory at point
#+kindex: hyperdrive-up
- ~^~ goes up to the parent directory
#+kindex: revert-buffer
- ~g~ refreshes the directory to display potential updates
#+kindex: hyperdrive-dir-download-file
- ~d~ downloads the file at point to disk
#+kindex: hyperdrive-dir-delete
- ~D~ deletes the file or directory (recursively) at point
#+kindex: hyperdrive-dir-history
- ~H~ opens the version history of file at point
#+kindex: hyperdrive-dir-copy-url
- ~w~ copies the URL of the file or directory at point
#+kindex: imenu
- ~j~ opens ~imenu~ to quickly jump to a file in the current directory
#+kindex: hyperdrive-describe-hyperdrive
- ~?~ opens a buffer describing the current hyperdrive

*** File view

The following keybindings are available inside the directory view by
default:

#+kindex: revert-buffer-quick
- ~C-x x g~ refreshes the file to display potential updates

If you have bound ~dired-jump~ in the global keymap (people often choose
~C-x C-j~), you can use the same binding to jump to the parent
hyperdrive directory from any hyperdrive file or directory buffer.

*** Unknown paths

When you attempt to load a file or folder that doesn't appear to
exist, ~hyperdrive.el~ will prompt you to take action:

- ~h~ (history) to open the version history for that file. (This only
  works for files, not folders)
- ~u~ (up) to open the parent directory containing that file or folder
- ~r~ (recurse) to go up the directory tree until a directory is found
  or until you get to the root directory.
- ~q~ (exit) to exit,
- ~?~ (help) to show a help message.

If you attempt to load the root directory (~hyper://PUBLIC-KEY/~) of a
for a hyperdrive with a valid-looking public key which you've never
loaded before and for which no peers are currently found,
~hyperdrive.el~ should warn you that no peers were found for that
drive. This might mean that the drive doesn't exist or just that
you're not connected to anyone who knows about it.

If you attempt to load a file or directory for a hyperdrive with a
malformed public key, ~hyperdrive.el~ should ask you to double-check the
URL.

** Write to a hyperdrive
#+findex: hyperdrive-write-buffer
#+findex: save-buffer
#+findex: save-some-buffers

You can write a buffer to a hyperdrive with ~hyperdrive-write-buffer~,
which will prompt you for one of hyperdrives you have created as well
as the path in that hyperdrive where you want to store the file. If
you are editing an existing hyperdrive file, ~save-buffer~ will
silently update the current hyperdrive entry with the new content.

On Emacs version 29.1 or later, ~save-some-buffers~ will save hyperdrive
files in addition to regular files.

** Link to a hyperdrive
#+findex: hyperdrive-copy-url
#+findex: hyperdrive-dir-copy-url

In the directory view, you can copy the URL at point with
~hyperdrive-dir-copy-url~ (see [[*Directory view]]). Additionally, you can
run ~hyperdrive-copy-url~ to copy the URL of the current hyperdrive
file or directory.

*** Org mode links

If the current file is an org-mode file, ~org-store-link~ will store a
link to the hyperdrive file, and if point is inside a heading, its
~CUSTOM_ID~, ~ID~, or heading text will be appended to the stored URL.

Relative links are supported; within ~hyper://PUBLIC-KEY/foo.org~, links
to ~bar.org~, ~./bar.org~, and ~/bar.org~ will all point to
~hyper://PUBLIC-KEY/bar.org~. A version number can also be specified;
~/$/version/42/bar.org~ will point to
~hyper://PUBLIC-KEY/$/version/42/bar.org~.

To link from a hyperdrive-mode org buffer to a file on the local
filesystem, explicitly add the ~file:~ link type prefix:
~file:~/.emacs.d/init.el~.

Org-mode hyperdrive link completion allows you to interactively link
to a hyperdrive file/folder by running ~M-x org-insert-link~ (or ~C-c
C-l~ in org-mode), then typing ~hyper:~ and ~RET~.

** View the hyperdrive version history
#+findex: hyperdrive-previous-version
#+findex: hyperdrive-next-version

Hyperdrives are versioned (see [[*Versioning]]).  To view the previous/next
version of a hyperdrive file, run ~hyperdrive-previous-version~ or
~hyperdrive-next-version~ inside the file's buffer.

*** History buffer
#+findex: hyperdrive-history

To view the entire known history of a file, use ~hyperdrive-history~.
For an explanation of the history buffer, see [[*Partial version data]].

The following keybindings are available inside the directory view by
default:

#+kindex: hyperdrive-history-find-file
- ~RET~ opens the file at the start of the range at point
#+kindex: hyperdrive-history-copy-url
- ~w~ copies the URL of the file at the start of the range at point
#+kindex: hyperdrive-history-download-file)
- ~d~ downloads the file at the start of the range at point

** Describe a hyperdrive
#+findex: hyperdrive-describe-hyperdrive

To see information about a hyperdrive, such as its public key, seed,
petname, nickname, domains, writable, or other metadata, run
~hyperdrive-describe-hyperdrive~. For more on what this information
means, see [[*Naming]].

It is possible to purge a hyperdrive from the ~hyperdrive-describe-mode~
buffer (see [[*Purge a hyperdrive]]).

** Bookmark a hyperdrive
#+findex: hyperdrive-bookmark-jump
#+findex: hyperdrive-bookmark-list

You can use the built-in ~bookmark-set~, ~bookmark-jump~, and
~bookmark-list~ functions to store and jump to a hyperdrive file or
directory. To jump to or view only hyperdrive bookmarks, use
~hyperdrive-bookmark-jump~ and ~hyperdrive-bookmark-list~.

** Download hyperdrive files
#+findex: hyperdrive-download-entry
#+findex: hyperdrive-download-url

You can download a hyperdrive file to your local filesystem. Download
the current hyperdrive file with ~hyperdrive-download-entry~ or paste
in a ~hyper://~ URL after ~hyperdrive-download-url~.

** Upload files from your filesystem
#+findex: hyperdrive-upload-file
#+findex: hyperdrive-upload-files
#+findex: yank-media

To upload a single file from your filesystem, use
~hyperdrive-upload-file~. By default, the selected file will be placed
in your hyperdrive's root directory, but you can edit the filepath
before uploading.

~hyperdrive-upload-files~ lets you upload multiple files from your
filesystem to a hyperdrive. As with the ~cp~ command, uploaded files
will be placed into the same TARGET-DIRECTORY.

On Emacs 29 or later, you can upload an image which you previously
copied to your clipboard from an external program with ~yank-media~.

*** Mirror a whole directory
#+findex: hyperdrive-mirror
#+findex: hyperdrive-mirror-do-upload

~hyperdrive-mirror~ uploads a directory, mirroring its subdirectory
structure in your hyperdrive.

Let's say you have some files on your filesystem in the ~~/blog/~
directory, and you want to upload them all into a hyperdrive you
already created with the petname "foo". The following snippet will
show you the list of files which will be uploaded as well as the ~hyper~
URL at which they will be available after upload. To upload the files,
run ~hyperdrive-mirror-do-upload~ (bound to ~C-c C-c~ by default) in the
~*hyperdrive-mirror*~ buffer which opens.

#+begin_src elisp
(hyperdrive-mirror "~/blog/" (hyperdrive-by-slot 'petname "foo")
                   :target-dir "/blog/")
#+end_src

To upload the same files without confirming, add ~:no-confirm t~.

*** Mirror files by tag or other attributes

~hyperdrive-mirror~ can accept a ~PREDICATE~ argument, which you can use
to upload only certain files.

Let's say that you have some files on your filesystem in the ~~/blog/~
directory, but you only want to upload those files which have been
tagged as "public" using Protesilaos Stavrou's [[https://protesilaos.com/emacs/denote][Denote]] file-naming
scheme.

The following snippet includes a ~PREDICATE~ key whose value is a
regular expression against which every expanded filename inside will
be tested.

#+begin_src elisp
(hyperdrive-mirror "~/blog/" (hyperdrive-by-slot 'petname "foo")
                   :target-dir "/blog/"
                   :predicate ".*_public.*")
#+end_src

Alternatively, you could select files by tag with Karl Voit's
[[https://github.com/novoid/filetags/][filetags]]. Either way allows for a "non-splitting" approach where
public and private files exist in the same directory.

~PREDICATE~ may also be a function, which receives the expanded filename
as its only argument. For example, the following snippet will mirror
only those files in ~~/blog/~ which are smaller than 5MB:

#+begin_src elisp
(hyperdrive-mirror "~/blog/" (hyperdrive-by-slot 'petname "foo")
                   :target-dir "/blog/"
                   :predicate (lambda (file) (> (* 5 1024 1024)
                                              (file-attribute-size (file-attributes file)))))
#+end_src

** Purge a hyperdrive
#+findex: hyperdrive-purge

To remove all data related to a hyperdrive, run ~hyperdrive-purge~. This
command will first prompt for confirmation.  In addition to the
hyperdrive's file content and metadata, ~hyperdrive-purge~ also removes
relevant data inside ~hyperdrive-hyperdrives~ and ~hyperdrive-version-ranges~.

*Data which has been purged from your local machine may still be
available on the network.*

** Non-interactive use
#+findex: hyperdrive-by-slot

In writing your own functions to extend ~hyperdrive.el~, you can use
~hyperdrive-by-slot~ to access a hyperdrive entry by its seed, petname,
or public key.

For examples, see [[*Mirror a whole directory]] and [[*Mirror files by tag or
other attributes]].

* Customization

You can customize the following variables settings by running ~M-x
customize-group RET hyperdrive RET~:

#+vindex: hyperdrive-storage-location
- ~hyperdrive-storage-location~ :: Location to store Hypercore
  data. Defaults to ~"~/.local/share/hyper-gateway-nodejs/"~.

#+vindex: hyperdrive-hyper-gateway-port
- ~hyperdrive-hyper-gateway-port~ :: Port on which to run the
  hyper-gateway server. Defaults to ~4973~.

#+vindex: hyperdrive-honor-auto-mode-alist
- ~hyperdrive-honor-auto-mode-alist~ :: If non-nil, use file extension
  of hyperdrive file to set ~major-mode~. Defaults to ~t~.

#+vindex: hyperdrive-persist-location
- ~hyperdrive-persist-location~ :: Location where ~persist~ will store
  data, currently ~hyperdrive-hyperdrives~ and ~hyperdrive-version-ranges~.
  By default, uses the default ~persist~ location.

#+vindex: hyperdrive-download-directory
- ~hyperdrive-download-directory~ :: Location where
  ~hyperdrive-download-url~ will download files. Defaults to
  ~eww-download-directory~ or, if not bound, the home directory.

#+vindex: hyperdrive-timestamp-format
- ~hyperdrive-timestamp-format~ :: Format string used for
  timestamps. Passed to ~format-time-string~, which see.

#+vindex: hyperdrive-directory-display-buffer-action
- ~hyperdrive-directory-display-buffer-action~ :: Display buffer action
  for hyperdrive directories. Passed to ~display-buffer~, which see.

#+vindex: hyperdrive-column-headers
- ~hyperdrive-column-headers~ :: Display column headers in
  ~hyperdrive-dir~ and ~hyperdrive-history~ buffers. Defaults to ~t~.

#+vindex: hyperdrive-history-display-buffer-action
- ~hyperdrive-history-display-buffer-action~ :: Display buffer action
  for hyperdrive history buffers. Passed to ~display-buffer~, which see.

#+vindex: hyperdrive-default-host-format
- ~hyperdrive-default-host-format~ :: Default format for displaying
  hyperdrive hostnames. See [[*Naming][Naming]] section for what this means.

#+vindex: hyperdrive-stream-player-command
- ~hyperdrive-stream-player-command~ :: Command used to play streamable
  URLs externally. Default uses [[https://mpv.io/][mpv]]. There also exists a preconfigured
  option for [[https://www.videolan.org/vlc/][VLC media player]].

#+vindex: hyperdrive-queue-size
- ~hyperdrive-queue-size~ :: Default number of request sent to
  ~hyper-gateway~ at a time in a queues. Defaults to ~2~.

#+vindex: hyperdrive-render-html
- ~hyperdrive-render-html~ :: Control how HTML hyperdrive files are
  displayed. By default, HTML pages are rendered in Emacs with [[info:eww#Top][EWW]]. If
  ~nil~, raw HTML will be displayed.

* Concepts

** Hyperdrive

[[https://docs.holepunch.to/building-blocks/hyperdrive][Hyperdrive]] is a virtual filesystem which you can use to share files on
the peer-to-peer (P2P) ~hyper~ network.  It's a special folder with a
long, unique link starting with ~hyper://~ that you can put files into
and other peers can pull files out of (if they have the link).

Anyone with that link can download its contents directly from your
computer.  There's no need to make an account or rely on a third party
to pass the data along.  What's more, anyone who has a copy of the
content in your hyperdrive can serve it to others.  This means that
your hyperdrive can circulate on the ~hyper~ network even when you're
offline.

Hyperdrive is single-writer, since only one peer (one machine) can
make changes to a hyperdrive.  No one can pretend to be you, since
files in a hyperdrive are cryptographically signed to ensure their
integrity and authenticity

You can make as many hyperdrives as you like; the only limitation is
your own disk space.

Hyperdrive is offline-first, since you can view files which
were previously downloaded even when disconnected from the rest of the
network.  It's also local-first, since you can connect with peers on a
LAN even without an internet connection.

Unlike BitTorrent, another protocol for sharing files, hyperdrives are
mutable.  You can add, update, or delete files inside a hyperdrive,
and peers will be able to access the latest version of the hyperdrive
at the same link.  However, old versions of your hyperdrive are never
lost. see [[*Versioning]] for more information.

*** Sparse replication
#+cindex: Sparse replication

Hyperdrive is sparsely replicated, meaning that peers can download
particular files from a hyperdrive without having to get the whole
drive. This reduces both load times and disk usage.

*** Versioning
#+cindex: Versioning

Hyperdrives are versioned, meaning that it is possible to explore a
hyperdrive as it was in the past. Version numbers indicate the
hyperdrive's version. For example, ~hyper://PUBLIC-KEY/$/version/50/~
refers to the fiftieth version of the hyperdrive identified by
~PUBLIC-KEY~. Loading a hyperdrive entry without specifying a version
number always loads the most recent version of that hyperdrive. If you
pass ~hyper://PUBLIC-KEY/foo.org~ to ~hyperdrive-open-url~, ~hyperdrive.el~
will always attempt to find ~/foo.org~ inside the latest version of that
hyperdrive.

Whenever you update an entry, the hyperdrive's version number gets
incremented by 1. The version number tells you how many times the
hyperdrive has been modified, not how many times a particular entry
has been modified. For example, let's say that the current version of
your hyperdrive at ~hyper://PUBLIC-KEY/~ is 50. If you add a new entry
at ~hyper://PUBLIC-KEY/bar.org~, the latest version of your hyperdrive
will become 51.

Since ~/bar.org~ did not exist before version 51, ~hyperdrive.el~ should
warn you that nothing exists at
~hyper://PUBLIC-KEY/$/version/50/bar.org~. If you add another file
~hyper://PUBLIC-KEY/quux.org~, your hyperdrive's latest version will
become 52. For the moment, ~hyper://PUBLIC-KEY/bar.org~,
~hyper://PUBLIC-KEY/$/version/51/bar.org~, and
~hyper://PUBLIC-KEY/$/version/52/bar.org~, all point to the same
version of ~/bar.org~. If you then make a change to ~/bar.org~, your
hyperdrive's latest version will become 53. Now
~hyper://PUBLIC-KEY/bar.org~ and
~hyper://PUBLIC-KEY/$/version/53/bar.org~ will point to the latest
version of ~/bar.org~, while the 51- and 52-versioned URLs will continue
to point to the original version.

Here's the history of ~/bar.org~ so far (the hyperdrive's latest version
is 53):

| Version range | exists |
|---------------+--------|
|          1-50 | no     |
|         51-52 | yes    |
|            53 | yes    |

The table shows that ~/bar.org~ did not exist from the beginning of the
hyperdrive history until version 51 (when it was created) and that it
was modified at version 53.  Since the final range number in the table
is 53, we also know that the hyperdrive's latest version is 53.

If you delete ~/bar.org~, ~hyper://PUBLIC-KEY/bar.org~ will no longer
point to anything, but the versioned URLs will still work.

Since only the current version of a hyperdrive entry can be updated,
~hyperdrive.el~ sets the buffer to read-only whenever a version number
is specified in a hyper URL.

**** Partial version data

Because hyperdrives are sparsely replicated (see [[*Sparse replication]]), you
might not know the full version history of a file.  For example, when
you load the most recent version of ~/bar.org~, the gateway
(see [[*Hyper-gateway]]) will also return the start of the version range
containing the most recent version of ~/bar.org~.  Since we also know
the latest version of the hyperdrive, the version ranges table with
the same data from the prior section would look like this:

| Version range | exists  |
|---------------+---------|
|          1-52 | unknown |
|            53 | yes     |

Running ~hyperdrive-previous~ inside of the buffer for the latest
version of ~/bar.org~ will load ~/bar.org~ at version 52. The gateway will
inform us that the version range for ~/bar.org~ that contains version 52
started at 51:

| Version range | exists  |
|---------------+---------|
|          1-50 | unknown |
|         51-52 | yes     |
|            53 | yes     |

Running ~hyperdrive-previous~ inside of the buffer for ~/bar.org~ at
version 51 or 52 will attempt to load ~/bar.org~ at
version 50. ~/bar.org~ does not exist at version 50, so the table will
now look like:

| Version range | exists  |
|---------------+---------|
|          1-49 | unknown |
|            50 | no      |
|         51-52 | yes     |
|            53 | yes     |

Crucially, when a file does not exist at a particular version, the
gateway does not tell us whether it ever existed in the past.  In
theory, ~/bar.org~ could have been created at version 6 and deleted
again at version 8.  The only way to determine that a file is
nonexistent for some version range is to query the network for that
file at every single version in the range.

**** No directory version history

Version history for directories is not implemented for a design reason
and technical reason:

- Directories have neither mtime nor size metadata, so a history view
  for directories wouldn't be that useful.
- Implementation of directory history would be somewhat ugly, since it
  requires either
  1. storing an entry for each directory in ~hyperdrive-version-ranges~,
     which doesn't optimally normalize version history data, or
  2. generating directory history based on the history of the files it
     contains, which can never prove that a directory doesn't exist.

** Hyper-gateway
#+cindex: Hyper-gateway

[[https://github.com/RangerMauve/hyper-gateway/][Hyper-gateway]] handles interactions with hyperdrive under the hood, and
it runs a local HTTP server which offers a Fetch API to access the
Hyperdrive network. In ~hyperdrive.el~, P2P interactions consist
mostly of, e.g., ~GET~ requests to download files and ~PUT~ requests
to write files to a hyperdrive.

** Naming
#+cindex: Naming

Inspired by Marc Stiegler's [[http://www.skyhunter.com/marcs/petnames/IntroPetNames.html][An Introduction to Petname Systems]],
~hyperdrive.el~ names drives in a three different ways:

- Public key :: public, globally unique, not human-memorable
- Nickname   :: public, not necessarily unique, human-memorable
- Petname    :: private, locally unique, human-memorable

If ~hyperdrive.el~ is like a phonebook, then public keys are phone
numbers, nicknames are how your contacts introduce themselves, and
petnames are the names you actually write down.

Each drive may also have one or both of the following attributes:

- Seed       :: string used to generate public key
- DNS domain :: public, globally unique, human-memorable

*** Public keys
#+cindex: Public keys
#+findex: hyperdrive-new

Public keys are 52-character-long, [[https://en.wikipedia.org/wiki/Base32#z-base-32][z-base-32]] encoded keys generated
from your secret master key and a seed string. ~hyper-gateway~ generates
the secret key for you, and you provide a seed (see [[*Seeds]]) when
generating a new drive with ~hyperdrive-new~.

Public keys allow for permanent links to hyperdrive content. When
sharing a hyperdrive with someone else, you will need to copy its full
URL. Peers can load your hyperdrive files directly from your computer
or from other peers who previously loaded those files.

*** Nicknames
#+cindex: Nicknames
#+findex: hyperdrive-set-nickname

Nicknames are public, memorable names which users can give to their
own hyperdrives. Other users can see the nicknames you give to your
hyperdrives.

Nicknames are stored in each hyperdrive inside
~/.well-known/host-meta.json~ under the ~name~ key, as specified in
RFC6415. You can only assign a nickname to hyperdrives which you have
created. Nicknames can be changed with ~hyperdrive-set-nickname~.

*** Petnames
#+cindex: Petnames
#+findex: hyperdrive-set-petname

Petnames are locally unique hyperdrive identifiers. You can give a
petname to any hyperdrive you load, whether you created it or not.

When creating a new drive, your chosen seed (see [[*Seeds]]) is used as its
petname by default. Petnames can be changed with
~hyperdrive-set-petname~, but drives cannot share a petname.

*** Seeds
#+cindex: Seeds

Along with your secret master key, seeds are used to generate public
keys (see [[*Public keys]]). A seed has a one-to-one relationship with a
drive. Seeds are local but not secret. To share a drive, you must use
a public key or DNS domain (see [[*DNS domains]]).

*** DNS domains
#+cindex: DNS domains

It is possible to use [[https://dnslink.io/][DNSLink]] to link to a hyperdrive with a domain
name instead of a public key (see [[*Public keys]]), like
~hyper://example.org/path/to/file~. Create a TXT record at
~_dnslink.example.org~ with the contents ~/hyper/PUBLIC-KEY~ (no trailing
slash). Note: relying on DNS adds another point of centralization,
reducing the durability of your link. ~hyperdrive.el~ somewhat mitigates
this issue by remembering which public key the DNS record resolved to,
so that peers can use the stored public key itself for subsequent
connections.

* Known limitations

** Files and folders can have the same name

Instead of files and folders, Hyperdrive technically has entries and
entry prefixes. In other words, "folders" don't exist unless they
contain files. It's possible for a "file" entry and a "folder" entry
prefix to have the same name, like ~hyper://PUBLIC-KEY/foo/bar/~ (a
"folder") and ~hyper://PUBLIC-KEY/foo/bar~ (a "file"). In this case, the
folder listing for ~hyper://PUBLIC-KEY/path/~ would display the ~to~ entry
but not the ~to/~ entry prefix. Because entry prefixes only exist when
they prefix an entry, deleting the last "file" in a "folder" causes
the "folder" to disappear as well.  When a hyperdrive "file" or
"folder" is not found, ~hyperdrive.el~ prompts you for an action
(see [[*Unknown paths]]).

* Troubleshooting

If you run into issues, please first try resetting the value of
~hyperdrive-hyperdrives~:

#+begin_src elisp
(progn
  (setf hyperdrive-hyperdrives (make-hash-table :test #'equal))
  (persist-save 'hyperdrive-hyperdrives))
#+end_src

Please ensure that your version of ~hyper-gateway~ (~M-x
hyperdrive-hyper-gateway-version~) is the latest version
([[https://github.com/RangerMauve/hyper-gateway/releases/][releases]]).

* Bugs and Patches

Bugs can be submitted to the [[https://todo.sr.ht/~ushin/ushin][ushin issue
tracker]]. Patches,
comments or questions can be submitted to the [[https://lists.sr.ht/~ushin/ushin][ushin public
inbox]].

* Acknowledgments

[[https://github.com/alphapapa/][Adam Porter]] for rewriting
~hyperdrive.el~ and for his work on ~plz.el~.

[[https://mauve.moe/][Mauve Signweaver]] for their guidance into the
world of p2p as well as the development of ~hyper-gateway~.

[[https://protesilaos.com][Protesilaos Stavrou]] for design input and user-testing ~hyperdrive.el~.

[[https://karl-voit.at/][Karl Voit]] for his feedback, especially the
suggestion that we allow for a non-splitting approach for uploading
files from the filesystem.

* Indices

** Keystroke index
:PROPERTIES:
:INDEX: ky
:END:

** Function index
:PROPERTIES:
:INDEX: fn
:END:

** Variable index
:PROPERTIES:
:INDEX: vr
:END:

** Concept index
:PROPERTIES:
:INDEX: cp
:END:

* GNU Free Documentation License

#+include: fdl.org

# Local Variables:
# sentence-end-double-space: t
# End:
