#+title: Hyperdrive.el User Manual
#+subtitle: Release {{{version}}}
#+author: Joseph Turner and Adam Porter
#+language: en
#+setupfile: doc-setup.org

#+texinfo_dir_category: Emacs
#+texinfo_dir_title: Hyperdrive: (hyperdrive)
#+texinfo_dir_desc: P2P filesystem in Emacs

[[https://docs.holepunch.to/building-blocks/hyperdrive][Hyperdrive]] is a P2P, real-time, local-first, versioned filesystem
designed for easy peer-to-peer file sharing.  ~hyperdrive.el~ is an
independent project built by [[https://ushin.org][USHIN]] which provides an Emacs interface
for managing hyperdrives.

~hyperdrive.el~ is in early development. If something breaks, please see
[[*Troubleshooting]].

- Homepage: https://ushin.org/hyperdrive/hyperdrive-manual.html
- Repository: https://git.sr.ht/~ushin/hyperdrive.el

This manual is for ~hyperdrive.el~ version {{{version}}}.

* Freedom to copy

Copyright \copy 2023 USHIN, Inc.

#+begin_quote
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover Texts being "A GNU Manual,"
and with the Back-Cover Texts as in (a) below.  A copy of the license
is included in the section entitled "GNU Free Documentation License."

(a) The FSF's Back-Cover Text is: "You have the freedom to copy and
modify this GNU manual."
#+end_quote

* Installation

** Emacs

~hyperdrive.el~ requires [[https://www.gnu.org/software/emacs/][GNU Emacs]] version 28.1 or later.

** hyper-gateway

*NOTICE*: Soon ~hyperdrive.el~ will depend on [[https://github.com/RangerMauve/hyper-sdk-rpc][hyper-sdk-rpc]] instead of
hyper-gateway.

~hyperdrive.el~ relies on [[https://github.com/RangerMauve/hyper-gateway/][hyper-gateway]] for talking to the hypercore
network ([[https://github.com/RangerMauve/hyper-gateway#how-do-i-install-hyper-gateway][installation instructions]]).

** hyperdrive.el

There are three recommended options for installing ~hyperdrive.el~:
NonGNU ELPA, MELPA, and ~package-vc~.

*** NonGNU ELPA

~hyperdrive.el~ can be installed from [[https://elpa.nongnu.org/nongnu/hyperdrive.html][NonGNU ELPA]] with ~M-x
package-refresh-contents~ then ~M-x package-install RET hyperdrive~.

After installing with NonGNU ELPA, you can later upgrade to a newer
version of ~hyperdrive.el~ by running ~M-x package-refresh-contents~
then ~M-x package-upgrade RET hyperdrive~. If ~package-upgrade~ is not
available as a command, display the list of packages with ~M-x
list-packages~, select ~hyperdrive~, and click the ~Install~ button.

*** MELPA

~hyperdrive.el~ is also available on [[https://melpa.org/#/hyperdrive][MELPA]].  First add the MELPA
repository...

#+begin_src emacs-lisp
  (with-eval-after-load 'package
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/")))
#+end_src

...then follow the [[*NonGNU ELPA][NonGNU ELPA]] installation instructions.

*** package-vc

/package-vc only works on Emacs 29.2 or later./

1. Ensure you have ~git~, ~makeinfo~ (part of the ~texinfo~ package), and
   Emacs 29.2 or newer.

2. Add the following lines to your ~init.el~ startup file:

#+begin_src emacs-lisp
  (unless (package-installed-p 'hyperdrive)
    ;; In Emacs 30, `ispell-buffer-session-localwords' will be marked as safe by default.
    (put 'ispell-buffer-session-localwords 'safe-local-variable #'list-of-strings-p)
    (package-vc-install 'hyperdrive))
#+end_src

Alternatively, if you have already cloned the ~hyperdrive.el~ repository,
you can use the following snippet to install from that repository:

#+begin_src emacs-lisp
  (unless (package-installed-p 'hyperdrive)
    (require 'package-vc)
    ;; In Emacs 30, `ispell-buffer-session-localwords' will be marked as safe by default.
    (put 'ispell-buffer-session-localwords 'safe-local-variable #'list-of-strings-p)
    ;; Change the path below to the location of your local hyperdrive.el repository.
    (package-vc-install-from-checkout "~/.local/src/hyperdrive.el" "hyperdrive"))
#+end_src

In your ~init.el~, type ~M-x eval-buffer RET~.

If all goes well, ~hyperdrive.el~ commands like ~M-x hyperdrive-menu~
should now be available.  The documentation for ~hyperdrive.el~ should
also be installed.

After installing with ~package-vc~, you can later upgrade to a newer
version of ~hyperdrive.el~ by running ~M-x package-vc-upgrade RET
hyperdrive RET~.

* Example configuration

After following the [[*Installation][installation instructions]], you can add this
snippet to your ~~/.emacs.d/init.el~ file.  This code will make the
keyboard shortcut ~C-c h~ (hold the ~Control~ key and tap ~c~, then release
both and tap ~h~) open [[*Hyperdrive menu command][the hyperdrive menu command]].  It will also enable
the [[*Menu bar support]["Hyperdrive" menu bar]]:

#+begin_src emacs-lisp
  (when (package-installed-p 'hyperdrive)
    (global-set-key (kbd "C-c h") #'hyperdrive-menu)
    (hyperdrive-menu-bar-mode 1))
#+end_src

With [[info:use-package][use-package]]:

#+begin_src emacs-lisp
  (use-package hyperdrive
    :bind ("C-c h" . hyperdrive-menu)
    :init (hyperdrive-menu-bar-mode 1))
#+end_src

* Usage

#+begin_example
Be careful about what you share!
When you upload a file, beware:
  You may delete your own copy,
  But gone it may not be.
On the network it still may be there.
#+end_example

** Menu bar support
#+findex: hyperdrive-menu-bar-mode
#+findex: menu-bar-mode

If you enabled ~hyperdrive-menu-bar-mode~, either in your configuration
(see [[*Example configuration]]) or with ~M-x hyperdrive-menu-bar-mode~,
the "Hyperdrive" menu should appear inside the "Tools" menu at the top
of the screen.  When the current buffer is visiting a hyperdrive
file/directory, the "Hyperdrive" menu will also be displayed as a
top-level menu.  If you don't see the menu bar, please double check
that ~menu-bar-mode~ is enabled (it is enabled by default).

** Hyperdrive menu command
#+findex: hyperdrive-menu

~M-x hyperdrive-menu~ is a keyboard-driven interface to many
~hyperdrive.el~ commands.  With the menu open, press one of highlit keys
or key combinations to invoke the command displayed next to it.
Different commands are available in ~hyperdrive-menu~ when you're inside
a hyperdrive file, directory, or neither.

While inside the ~hyperdrive-menu~, press ~?~ twice to open this
~hyperdrive.el~ info manual.  You can also press ~?~ followed by a
command's key sequence to get help for that command. ([[*Quick documentation access][more tips on
getting help]])

If you press ~C-u~ (universal prefix argument) before a key sequence,
the command may behave differently, e.g., by prompting for more
information.  You can jump between ~hyperdrive-menu~ commands with the
~up~ and ~down~ arrow keys.  Press ~C-g~ to close the menu.

For more on this type of user interface, please refer to the [[info:transient#Introduction][Transient
documentation]].  To learn about the commands available in
~hyperdrive-menu~, read on!

** Start/stop the gateway
#+findex: hyperdrive-start
#+findex: hyperdrive-stop

To connect with peers, you'll need to start ~hyper-gateway~. If you
[[https://github.com/RangerMauve/hyper-gateway#how-do-i-run-hyper-gateway-as-a-background-process-on-gnulinux--systemd][install ~hyper-gateway~ as a SystemD
service]],
you can connect and disconnect from the network with ~M-x
hyperdrive-start~ and ~M-x hyperdrive-stop~. Otherwise, follow [[https://github.com/RangerMauve/hyper-gateway#usage][these
instructions]] to
run ~hyper-gateway~ manually.

** Open a hyperdrive
#+findex: hyperdrive-open-url
#+findex: hyperdrive-find-file
#+findex: hyperdrive-view-file

You can open a hyperdrive folder or file by pasting in a ~hyper://~ URL
after ~M-x hyperdrive-open-url~.  Try loading USHIN's hyperdrive:

#+begin_example
hyper://aaj45d88g4eenu76rpmwzjiabsof1w8u6fufq6oogyhjk1ubygxy/
#+end_example

Alternatively, ~M-x hyperdrive-find-file~ remembers hyperdrives you have
already created or visited.  It will prompt you for a known hyperdrive
and a path inside it.  ~hyperdrive-view-file~ is like
~hyperdrive-find-file~, but it opens the file in [[info:emacs#View Mode][view-mode]].

*** Directory view

The following keybindings are available inside the directory view by
default:

#+kindex: hyperdrive-dir-previous
#+kindex: hyperdrive-dir-next
- ~n~ and ~p~ move between entries
#+kindex: hyperdrive-dir-find-file
- ~RET~ or opens file or directory at point
#+kindex: hyperdrive-dir-find-file-other-window
- ~o~, left click, or middle click opens the file or directory at point
  in a new window
#+kindex: hyperdrive-dir-view-file
- ~v~ opens file or directory at point in [[info:emacs#View Mode][view-mode]].
#+kindex: hyperdrive-up
- ~^~ goes up to the parent directory
#+kindex: revert-buffer
- ~g~ refreshes the directory to display potential updates
#+kindex: hyperdrive-dir-sort
- ~s~ sorts directory contents by column (to sort by a different
  column, click on the column header or use the `C-u` universal
  prefix argument)
#+kindex: hyperdrive-dir-download-file
- ~d~ downloads the file at point to disk
#+kindex: hyperdrive-delete
- ~D~ deletes the file or directory (recursively) at point
#+kindex: hyperdrive-dir-history
- ~H~ opens the [[*View the hyperdrive version history][version history]] of file at point
#+kindex: hyperdrive-dir-copy-url
- ~w~ copies the URL of the file or directory at point
#+kindex: imenu
- ~j~ opens ~imenu~ to quickly jump to a file in the current directory
#+kindex: hyperdrive-menu
- ~?~ opens ~hyperdrive-menu~ (see [[*Hyperdrive menu command][Hyperdrive menu command]])
#+kindex: hyperdrive-create-directory-no-op
- ~+~ signals an error, because you cannot create empty directories ([[*No empty directories]])

*** File view

The following keybindings are available inside the directory view by
default:

#+kindex: revert-buffer-quick
- ~C-x x g~ refreshes the file to display potential updates

If you have bound ~dired-jump~ in the global keymap (people often choose
~C-x C-j~), you can use the same binding to jump to the parent
hyperdrive directory from any hyperdrive file or directory buffer.

*** Unknown paths

When you attempt to load a file or folder that doesn't appear to
exist, ~hyperdrive.el~ will prompt you to take action:

- ~h~ (history) to open the [[*View the hyperdrive version history][version history]] for that file. (This only
  works for files, not folders)
- ~u~ (up) to open the parent directory containing that file or folder
- ~r~ (recurse) to go up the directory tree until a directory is found
  or until you get to the root directory.
- ~q~ (exit) to exit,
- ~?~ (help) to show a help message.

If you attempt to load the root directory (~hyper://PUBLIC-KEY/~) of a
hyperdrive with a valid-looking public key which you've never loaded
before and for which no peers are currently found, ~hyperdrive.el~
should warn you that no peers were found for that drive.  This might
mean that the drive doesn't exist or just that you're not connected to
anyone who knows about it.

If you attempt to load a file or directory for a hyperdrive with a
malformed public key, ~hyperdrive.el~ should ask you to double-check the
URL.

** Create a hyperdrive
#+findex: hyperdrive-new

You can have multiple hyperdrives, each one containing its own set of
files. Run ~M-x hyperdrive-new~ then type in a ~seed~ (see [[*Seeds]]) to
create a new hyperdrive. That seed will be combined with your secret
master key (see [[*Master key]]) to produce a public key (see [[*Public
keys]]) that uniquely identifies that hyperdrive.

** Write to a hyperdrive
#+findex: hyperdrive-write-buffer
#+findex: save-buffer
#+findex: save-some-buffers
#+vindex: save-some-buffers-default-predicate

You can write a buffer to a hyperdrive with ~hyperdrive-write-buffer~,
which will prompt you for one of hyperdrives you have created as well
as the path in that hyperdrive where you want to store the file. If
you are editing an existing hyperdrive file, ~save-buffer~ will
silently update the current hyperdrive file with the new content.

~hyperdrive.el~ will prompt to save modified hyperdrive files before
exiting Emacs. If you want the command ~save-some-buffers~ to always
prompt to save hyperdrive files in addition to regular files, set
~save-some-buffers-default-predicate~ to ~t~.

** Link to a hyperdrive
#+findex: hyperdrive-copy-url
#+findex: hyperdrive-dir-copy-url

In the directory view, you can copy the URL at point with
~hyperdrive-dir-copy-url~ (see [[*Directory view]]). Additionally, you can
run ~hyperdrive-copy-url~ to copy the URL of the current hyperdrive
file or directory.

*** Org mode links

If the current file is an org-mode file, ~org-store-link~ will store a
link to the hyperdrive file, and if point is inside a heading, its
~CUSTOM_ID~, ~ID~, or heading text will be appended to the stored URL.

Relative links are supported; within ~hyper://PUBLIC-KEY/foo.org~, links
to ~bar.org~, ~./bar.org~, and ~/bar.org~ will all point to
~hyper://PUBLIC-KEY/bar.org~. A version number can also be specified;
~/$/version/42/bar.org~ will point to
~hyper://PUBLIC-KEY/$/version/42/bar.org~.

To link from a hyperdrive-mode org buffer to a file on the local
filesystem, explicitly add the ~file:~ link type prefix:
~file:~/.emacs.d/init.el~.

Org-mode hyperdrive link completion allows you to interactively link
to a hyperdrive file/folder by running ~M-x org-insert-link~ (or ~C-c C-l~
in org-mode), then typing ~hyper:~ and ~RET~.  To change how
~org-insert-link~ inserts links to files within the same hyperdrive,
adjust ~hyperdrive-org-link-full-url~ and ~org-link-file-path-type~.

*** Markdown links

Relative links are supported; within ~hyper://PUBLIC-KEY/foo.md~, the
links ~[bar](<bar.md>)~, ~[bar](<./bar.md>)~, and ~[bar](</bar.md>)~ will
all point to ~hyper://PUBLIC-KEY/bar.md~.

** Delete a hyperdrive file
#+findex: hyperdrive-delete

You can use ~hyperdrive-delete~ to delete the hyperdrive file in the
current buffer.  This command has a keybinding in the [[*Directory view][directory view]].

*Please note that deleted files can be accessed by [[*View the hyperdrive version history][loading a prior version]]
of the hyperdrive.*

** View the hyperdrive version history
#+findex: hyperdrive-open-previous-version
#+findex: hyperdrive-open-next-version
#+findex: hyperdrive-open-at-version

Hyperdrives are versioned (see [[*Versioning]]).  To open the
previous/next version of a hyperdrive file or directory, run
~hyperdrive-open-previous-version~ or ~hyperdrive-open-next-version~.
~hyperdrive-open-at-version~ lets you specify a version number; leaving
the version blank opens the current file or directory at its
hyperdrive's latest version.

*** History buffer
#+findex: hyperdrive-history

To view the entire known history of a file, use ~hyperdrive-history~.
For an explanation of the history buffer, see [[*Partial version data]].

The following keybindings are available inside the directory view by
default:

#+kindex: hyperdrive-history-fill-version-ranges
- ~+~ loads version history for unknown ranges
#+kindex: hyperdrive-history-find-file
- ~RET~ opens the file at the start of the range at point
#+kindex: hyperdrive-history-find-file-other-window
- ~o~, left click, or middle click opens the file at the start of the
  range at point at point in a new window
#+kindex: hyperdrive-history-view-file
- ~v~ opens the file at the start of the range at point in [[info:emacs#View Mode][view-mode]]
#+kindex: hyperdrive-history-copy-url
- ~w~ copies the URL of the file at the start of the range at point
#+kindex: hyperdrive-history-download-file
- ~d~ downloads the file at the start of the range at point
#+kindex: hyperdrive-history-diff
- ~=~ displays the differences between the version at point and the
  prior version

To act on the latest known version of the file, use these keybindings
on the header line displaying the file description.

** Describe a hyperdrive
#+findex: hyperdrive-describe-hyperdrive

To see information about a hyperdrive, such as its public key, seed,
petname, nickname, domains, writable, or other metadata, run
~hyperdrive-describe-hyperdrive~. For more on what this information
means, see [[*Naming]].

** Bookmark a hyperdrive
#+findex: hyperdrive-bookmark-jump
#+findex: hyperdrive-bookmark-list

You can use the built-in ~bookmark-set~, ~bookmark-jump~, and
~bookmark-list~ functions to store and jump to a hyperdrive file or
directory. To jump to or view only hyperdrive bookmarks, use
~hyperdrive-bookmark-jump~ and ~hyperdrive-bookmark-list~.

** Stream audio and video

When you use ~hyperdrive-find-file~ or some other command to open a
streamable audio/video file, Emacs will use an external program to
stream that video from the network.  After the stream finishes, the
audio/video file is stored locally.

** Download hyperdrive files
#+findex: hyperdrive-download
#+findex: hyperdrive-download-url

You can download a hyperdrive file to your local filesystem. Download
the current hyperdrive file with ~hyperdrive-download~ or paste
in a ~hyper://~ URL after ~hyperdrive-download-url~.

** Upload files from your filesystem
#+findex: hyperdrive-upload-file
#+findex: hyperdrive-upload-files
#+findex: yank-media

To upload a single file from your filesystem, use
~hyperdrive-upload-file~. By default, the selected file will be placed
in your hyperdrive's root directory, but you can edit the filepath
before uploading.

~hyperdrive-upload-files~ lets you upload multiple files from your
filesystem to a hyperdrive. As with the ~cp~ command, uploaded files
will be placed into the same TARGET-DIRECTORY.

On Emacs 29 or later, you can upload an image which you previously
copied to your clipboard from an external program with ~yank-media~.

*** Mirror a whole directory
#+findex: hyperdrive-mirror
#+findex: hyperdrive-mirror-do-upload

~hyperdrive-mirror~ uploads a directory, mirroring its subdirectory
structure in your hyperdrive. It is an interactive command, but the
following example shows its non-interactive use.

Let's say you have some files on your filesystem in the ~~/blog/~
directory, and you want to upload them all into a hyperdrive you
already created with the petname "foo". The following snippet will
show you the list of files which will be uploaded as well as the ~hyper~
URL at which they will be available after upload. To upload the files
which are "locally new" (they don't already exist on the drive) or
"locally newer" (they have been locally modified since a previous
upload), run ~hyperdrive-mirror-do-upload~ (bound to ~C-c C-c~ by default)
in the ~*hyperdrive-mirror*~ buffer which opens.

#+begin_src elisp
(hyperdrive-mirror "~/blog/" (hyperdrive-by-slot 'petname "foo")
                   :target-dir "/blog/")
#+end_src

To upload the same files without confirming, add ~:no-confirm
t~.  Interactively, use two universal prefix arguments ~C-u C-u~.

*** Mirror files by tag or other attributes

~hyperdrive-mirror~ can accept a ~FILTER~ argument, which you can
use to upload only certain files.  Interactively, one universal prefix
argument ~C-u~ make this command prompt you for ~FILTER~.

Let's say that you have some files on your filesystem in the ~~/blog/~
directory, but you only want to upload those files which have been
tagged as "public" using Protesilaos Stavrou's [[https://protesilaos.com/emacs/denote][Denote]] file-naming
scheme.

The following snippet includes a ~FILTER~ key whose value is a
regular expression against which every expanded filename inside will
be tested.

#+begin_src elisp
(hyperdrive-mirror "~/blog/" (hyperdrive-by-slot 'petname "foo")
                   :target-dir "/blog/"
                   :filter ".*_public.*")
#+end_src

Alternatively, you could select files by tag with Karl Voit's
[[https://github.com/novoid/filetags/][filetags]]. Either way allows for a "non-splitting" approach where
public and private files exist in the same directory.

~FILTER~ may also be a function, which receives the expanded filename
as its only argument. For example, the following snippet will mirror
only those files in ~~/blog/~ which are smaller than 5MB:

#+begin_src elisp
(hyperdrive-mirror "~/blog/" (hyperdrive-by-slot 'petname "foo")
                   :target-dir "/blog/"
                   :filter (lambda (file) (> (* 5 1024 1024)
                                              (file-attribute-size (file-attributes file)))))
#+end_src

** Purge a hyperdrive
#+findex: hyperdrive-purge

To remove all data related to a hyperdrive, run ~hyperdrive-purge~. This
command will first prompt for confirmation.  In addition to the
hyperdrive's file content and metadata, ~hyperdrive-purge~ also removes
relevant data inside ~hyperdrive-hyperdrives~ and ~hyperdrive-version-ranges~.

*Data which has been purged from your local machine may still be
available on the network.*

** Non-interactive use
#+findex: hyperdrive-by-slot

In writing your own functions to extend ~hyperdrive.el~, you can use
~hyperdrive-by-slot~ to access a hyperdrive by its seed, petname, or
public key.

For examples, see [[*Mirror a whole directory]] and [[*Mirror files by tag or
other attributes]].

** Miscellaneous features

*** Find file at point integration
#+findex: find-file-at-point

If you have enabled ~find-file-at-point~ (~ffap~) bindings with ~M-x
ffap-bindings~, you can open a hyperdrive link by putting the point on
it and pressing ~C-x C-f~.

*** Embark integration
#+findex: embark-act

Embark users can run ~embark-act~ in the ~hyperdrive-complete-hyperdrive~
~completing-read~ interface in order to select an alternative action for
the selected hyperdrive.

* Concepts

** Hyperdrive

[[https://docs.holepunch.to/building-blocks/hyperdrive][Hyperdrive]] is a virtual filesystem which you can use to share files on
the peer-to-peer (P2P) ~hyper~ network.  It's a special folder with a
long, unique link starting with ~hyper://~ that you can put files into
and other peers can pull files out of (if they have the link).

Anyone with that link can download its contents directly from your
computer.  There's no need to make an account or rely on a third party
to pass the data along.  What's more, anyone who has a copy of the
content in your hyperdrive can serve it to others.  This means that
your hyperdrive can circulate on the ~hyper~ network even when you're
offline.

Hyperdrive is single-writer, since only one peer (one machine) can
make changes to a hyperdrive.  No one can pretend to be you, since
files in a hyperdrive are cryptographically signed to ensure their
integrity and authenticity.

You can make as many hyperdrives as you like; the only limitation is
your own disk space.

Hyperdrive is offline-first, since you can view files which
were previously downloaded even when disconnected from the rest of the
network.  It's also local-first, since you can connect with peers on a
LAN even without an internet connection.

Unlike BitTorrent, another protocol for sharing files, hyperdrives are
mutable.  You can add, update, or delete files inside a hyperdrive,
and peers will be able to access the latest version of the hyperdrive
at the same link.  However, old versions of your hyperdrive can still
be accessed.  See [[*Versioning]] for more information.

*** Sparse replication
#+cindex: Sparse replication

Hyperdrive is sparsely replicated, meaning that peers can download
particular files from a hyperdrive without having to get the whole
drive. This reduces both load times and disk usage.

*** Versioning
#+cindex: Versioning

Hyperdrives are versioned, meaning that it is possible to explore a
hyperdrive as it was in the past. Version numbers indicate the
hyperdrive's version. For example, ~hyper://PUBLIC-KEY/$/version/50/~
refers to the fiftieth version of the hyperdrive identified by
~PUBLIC-KEY~. If you want to load the latest version, leave out the
~/$/version/N~ part.  For example, if you run...

#+begin_example
M-x hyperdrive-open-url RET hyper://PUBLIC-KEY/foo.org RET
#+end_example

...then ~hyperdrive.el~ will attempt to find ~/foo.org~ inside the latest version
of that hyperdrive.

Whenever you add a file, remove a file, or change a file, the
hyperdrive's version number gets incremented by 1. The version number
tells you how many times the hyperdrive has been modified, not how
many times a particular file has been modified. For example, let's say
that the current version of your hyperdrive at ~hyper://PUBLIC-KEY/~
is 50. If you add a new file at ~hyper://PUBLIC-KEY/bar.org~, the latest
version of your hyperdrive will become 51.

Since ~/bar.org~ did not exist before version 51, ~hyperdrive.el~ should
warn you that nothing exists at
~hyper://PUBLIC-KEY/$/version/50/bar.org~. If you add another file
~hyper://PUBLIC-KEY/quux.org~, your hyperdrive's latest version will
become 52. For the moment, ~hyper://PUBLIC-KEY/bar.org~,
~hyper://PUBLIC-KEY/$/version/51/bar.org~, and
~hyper://PUBLIC-KEY/$/version/52/bar.org~, all point to the same version
of ~/bar.org~. If you then make a change to ~/bar.org~, your hyperdrive's
latest version will become 53. Now ~hyper://PUBLIC-KEY/bar.org~ and
~hyper://PUBLIC-KEY/$/version/53/bar.org~ will point to the latest
version of ~/bar.org~, while the 51- and 52-versioned URLs will continue
to point to the original version.

Here's the history of ~/bar.org~ so far (the hyperdrive's latest version
is 53):

| Version range | exists |
|---------------+--------|
|            53 | yes    |
|         51-52 | yes    |
|          1-50 | no     |

The table shows that ~/bar.org~ did not exist from the beginning of the
hyperdrive history until version 51 (when it was created) and that it
was modified at version 53.  Since the final range number in the table
is 53, we also know that the hyperdrive's latest version is 53.

If you delete ~/bar.org~ then try to load ~hyper://PUBLIC-KEY/bar.org~,
~hyperdrive.el~ will open an empty buffer for you to author a new file.
If another user (not you) attempts to load that URL, ~hyperdrive.el~
will warn ~"URL not found"~.  All users can still access the old file
contents at the versioned URLs.

Since only the current version of a hyperdrive file can be updated,
~hyperdrive.el~ sets the buffer to read-only whenever a version number
is specified in a hyper URL.

**** Partial version data

Because hyperdrives are sparsely replicated (see [[*Sparse replication]]), you
might not know the full version history of a file.  For example, when
you load the most recent version of ~/bar.org~, the gateway
(see [[*Hyper-gateway]]) will also return the start of the version range
containing the most recent version of ~/bar.org~.  Since we also know
the latest version of the hyperdrive, the version ranges table with
the same data from the prior section would look like this:

| Version range | exists  |
|---------------+---------|
|            53 | yes     |
|          1-52 | unknown |

Running ~hyperdrive-previous~ inside of the buffer for the latest
version of ~/bar.org~ will load ~/bar.org~ at version 52. The gateway will
inform us that the version range for ~/bar.org~ that contains version 52
started at 51:

| Version range | exists  |
|---------------+---------|
|            53 | yes     |
|         51-52 | yes     |
|          1-50 | unknown |

Running ~hyperdrive-previous~ inside of the buffer for ~/bar.org~ at
version 51 or 52 will attempt to load ~/bar.org~ at
version 50. ~/bar.org~ does not exist at version 50, so the table will
now look like:

| Version range | exists  |
|---------------+---------|
|            53 | yes     |
|         51-52 | yes     |
|            50 | no      |
|          1-49 | unknown |

Crucially, when a file does not exist at a particular version, the
gateway does not tell us whether it ever existed in the past.  In
theory, ~/bar.org~ could have been created at version 6 and deleted
again at version 8.  The only way to determine that a file is
nonexistent for some version range is to query the network for that
file at every single version in the range.

**** No directory version history

Version history for directories is not implemented for a design reason
and technical reason:

- Directories have neither mtime nor size metadata, so a history view
  for directories wouldn't be that useful.
- Implementation of directory history would be somewhat ugly, since it
  requires either
  1. storing an entry for each directory in ~hyperdrive-version-ranges~,
     which doesn't optimally normalize version history data, or
  2. generating directory history based on the history of the files it
     contains, which can never prove that a directory doesn't exist.

*** Master key
# TODO: Link to this node once we've added backup/restore.

The secret master key is combined with a seed (see [[*Seeds]]) to generate
a new public key for a hyperdrive when you run ~hyperdrive-new~.  Your
master key is generated automatically by ~hyper-gateway~.

** Hyper-gateway
#+cindex: Hyper-gateway

[[https://github.com/RangerMauve/hyper-gateway/][Hyper-gateway]] handles interactions with hyperdrive under the hood, and
it runs a local HTTP server which offers a Fetch API to access the
Hyperdrive network. In ~hyperdrive.el~, P2P interactions consist
mostly of, e.g., ~GET~ requests to download files and ~PUT~ requests
to write files to a hyperdrive.

** Naming
#+cindex: Naming
#+vindex: hyperdrive-formats

Inspired by Marc Stiegler's [[http://www.skyhunter.com/marcs/petnames/IntroPetNames.html][An Introduction to Petname Systems]],
~hyperdrive.el~ names drives in a three different ways:

- Public key :: public, globally unique, not human-memorable
- Nickname   :: public, not necessarily unique, human-memorable
- Petname    :: private, locally unique, human-memorable

If ~hyperdrive.el~ is like a phonebook, then public keys are phone
numbers, nicknames are how your contacts introduce themselves, and
petnames are the names you actually write down.

Each drive may also have one or both of the following attributes:

- Seed       :: string used to generate public key
- DNS domain :: public, globally unique, human-memorable

*** Public keys
#+cindex: Public keys
#+findex: hyperdrive-new

Public keys are globally unique identifiers for hyperdrives.  They
make up the first part of a ~hyper://~ URL.  Public keys are
52-character-long [[https://en.wikipedia.org/wiki/Base32#z-base-32][z-base-32]] encoded keys generated from your master
key (see [[*Master key]]) and a [[*Seeds][seed]] string.  When you run ~hyperdrive-new~
and type a new seed, ~hyper-gateway~ automatically generates a new
public key.

*** Nicknames
#+cindex: Nicknames
#+findex: hyperdrive-set-nickname

Nicknames are public, memorable names which you can give to your own
hyperdrives to make them easier for others to recognize.  Other users
can see your nicknames but cannot change them.

Nicknames are stored in each hyperdrive inside
~/.well-known/host-meta.json~ under the ~name~ key, as specified in
[[https://www.rfc-editor.org/rfc/rfc6415#section-6.1][RFC6415]].  You can update a hyperdrive's nickname with
~hyperdrive-set-nickname~.

*** Petnames
#+cindex: Petnames
#+findex: hyperdrive-set-petname

Petnames are locally unique hyperdrive identifiers. You can give a
petname to any hyperdrive you load, whether you created it or not.

When creating a new drive, your chosen seed (see [[*Seeds]]) is used as its
petname by default. Petnames can be changed with
~hyperdrive-set-petname~, but drives cannot share a petname.

*** Seeds
#+cindex: Seeds

Seeds are used in tandem with your secret master key (see [[*Master key]])
to generate public keys (see [[*Public keys]]).  The same seed and master
key will always produce the same public key, so a hyperdrive's seed
cannot be changed.  Seeds are local but not secret.  To share a drive,
you must use a public key or DNS domain (see [[*DNS domains]]).

*** DNS domains
#+cindex: DNS domains

It is possible to use [[https://dnslink.io/][DNSLink]] to link to a hyperdrive with a domain
name instead of a public key (see [[*Public keys]]), like
~hyper://example.org/path/to/file~. Create a TXT record at
~_dnslink.example.org~ with the contents ~/hyper/PUBLIC-KEY~ (no trailing
slash). Note: relying on DNS adds another point of centralization,
reducing the durability of your link. ~hyperdrive.el~ somewhat mitigates
this issue by remembering which public key the DNS record resolved to,
so that peers can use the stored public key itself for subsequent
connections.

DNS domains are checked for suspicious characters (see
[[info:elisp#Suspicious Text]]).

* Customization

You can customize the following variables settings by running ~M-x
customize-group RET hyperdrive RET~:

#+vindex: hyperdrive-hyper-gateway-port
- ~hyperdrive-hyper-gateway-port~ :: Port on which to run the
  hyper-gateway server. Defaults to ~4973~.

#+vindex: hyperdrive-honor-auto-mode-alist
- ~hyperdrive-honor-auto-mode-alist~ :: If non-nil, use file extension
  of hyperdrive file to set ~major-mode~. Defaults to ~t~.

#+vindex: hyperdrive-persist-location
- ~hyperdrive-persist-location~ :: Location where ~persist~ will store
  data, currently ~hyperdrive-hyperdrives~ and ~hyperdrive-version-ranges~.
  By default, uses the default ~persist~ location.

#+vindex: hyperdrive-download-directory
- ~hyperdrive-download-directory~ :: Location where
  ~hyperdrive-download-url~ will download files. Defaults to
  ~eww-download-directory~ or, if not bound, the home directory.

#+vindex: hyperdrive-timestamp-format
- ~hyperdrive-timestamp-format~ :: Format string used for
  timestamps. Passed to ~format-time-string~, which see.

#+vindex: hyperdrive-directory-display-buffer-action
- ~hyperdrive-directory-display-buffer-action~ :: Display buffer action
  for hyperdrive directories. Passed to ~display-buffer~, which see.

#+vindex: hyperdrive-directory-sort
- ~hyperdrive-directory-sort~ :: Column by which directory entries are sorted.
Internally, a cons cell of (COLUMN . DIRECTION), the COLUMn being one
of the directory listing columns (~name~, ~size~, or ~mtime~) and
DIRECTION being one of ~:ascending~ or ~:descending~.

#+vindex: hyperdrive-history-display-buffer-action
- ~hyperdrive-history-display-buffer-action~ :: Display buffer action
  for hyperdrive history buffers. Passed to ~display-buffer~, which see.

#+vindex: hyperdrive-stream-player-command
- ~hyperdrive-stream-player-command~ :: Command used to play streamable
  URLs externally. Default uses [[https://mpv.io/][mpv]]. There also exists a preconfigured
  option for [[https://www.videolan.org/vlc/][VLC media player]].

#+vindex: hyperdrive-queue-limit
- ~hyperdrive-queue-limit~ :: Default number of request sent to
  ~hyper-gateway~ at a time in a queues. Defaults to ~20~.

#+vindex: hyperdrive-fill-version-ranges-limit
- ~hyperdrive-queue-limit~ :: Default maximum number of requests when
  filling version history. Defaults to ~10~.

#+vindex: hyperdrive-render-html
- ~hyperdrive-render-html~ :: Control how HTML hyperdrive files are
  displayed. By default, HTML pages are rendered in Emacs with [[info:eww#Top][EWW]]. If
  ~nil~, raw HTML will be displayed.

#+vindex: hyperdrive-reuse-buffers
- ~hyperdrive-reuse-buffers~ :: How to reuse buffers when showing entries.
  By default (~any-version~), opening a hyperdrive file or directory
  reuses a buffer that is already visiting it, regardless of
  version. To have separate buffers for each version of a
  file/directory, use ~same-version~.

#+vindex: hyperdrive-preferred-formats
- ~hyperdrive-preferred-formats~ :: List of metadata types used to
  display hyperdrives.  Hyperdrives are displayed using the first
  available metadata type.  See [[*Naming][Naming]] section for what this means.

#+vindex: hyperdrive-default-entry-format
- ~hyperdrive-default-entry-format~ :: Format string for displaying
  hyperdrive entries (files/directories).  By default, entries are
  displayed with the preferred hyperdrive format in brackets (see
  ~hyperdrive-preferred-formats~), followed by the full entry path,
  followed by "version: " and version in parentheses.

#+vindex: hyperdrive-buffer-name-format
- ~hyperdrive-buffer-name-format~ :: Format string for buffer names of
  buffers visiting hyperdrive files/directories.  By default, this
  format is like ~hyperdrive-default-entry-format~ with the entry name
  sans directory instead of the full path.

#+vindex: hyperdrive-formats
- ~hyperdrive-formats~ :: Alist mapping hyperdrive and hyperdrive
  entry metadata to a format string, used in
  ~hyperdrive-default-entry-format~ and ~hyperdrive-buffer-name-format~ as
  well as other places hyperdrives or entries are displayed.  By
  default, each metadatum is prefixed by its type, e.g., the petname
  ~foo~ is displayed by default as ~petname:foo~.

  Feel free to adjust the following example configuration for
  abbreviated labels:

  #+begin_src emacs-lisp
    (setq hyperdrive-formats '((name . "%s")
                               (version . " (%s)")
                               (path . "%s")
                               (petname . "p:%s")
                               (nickname . "n:%s")
                               (public-key . "k:%s")
                               (short-key . "k:%.8s…")
                               (seed . "s:%s")
                               (domains . "d:%s")))
  #+end_src

  With this snippet, the petname ~foo~ now displays as ~p:foo~.  For further
  customization, run ~M-x customize-group RET ~hyperdrive-entry-format~.

** Additional customization

This section mentions ways to change the behavior of ~hyperdrive.el~
besides its own customization options.

*** Completion styles and cycling
#+vindex: completion-category-overrides
#+findex: hyperdrive-complete-hyperdrive
#+findex: completing-read

~hyperdrive-complete-hyperdrive~ offers a ~completing-read~ interface for
selecting a hyperdrive from a list of known hyperdrive.  You can
customize the completion styles and cycling behavior of
~hyperdrive-complete-hyperdrive~ by customizing the ~hyperdrive~ category
in ~completion-category-overrides~.

* Known limitations

** No empty directories

Instead of files and folders, Hyperdrive technically has entries and
entry prefixes.  In other words, folders don't exist unless they
contain files.  This results in potentially unexpected behavior:

- it is not possible to create empty directories
- deleting the last file in a folder deletes the folder as well

When a hyperdrive file or folder is not found, ~hyperdrive.el~ prompts
you for an action (see [[*Unknown paths]]).

** Files and folders can have the same name

In the current implementation of Hyperdrive, it's possible for an
entry (folder) and an entry prefix (folder) to have the same name,
e.g., ~hyper://PUBLIC-KEY/foo/bar/~ and ~hyper://PUBLIC-KEY/foo/bar~. In
this case, the folder listing for ~hyper://PUBLIC-KEY/foo/~ would
display the ~bar~ entry but not the ~bar/~ entry prefix.

* Tips

** Quick documentation access

You can open the ~hyperdrive.el~ info manual from ~hyperdrive-menu~ by
pressing ~?~ twice.

To view documentation for ~hyperdrive.el~ commands, functions, and
variables, press ~C-h o~ (~describe-symbol~). Inside the ~*Help*~
buffer that pops open, you can press ~i~ (~help-goto-info~) to jump to
the relevant section in the ~hyperdrive.el~ manual.

* Troubleshooting

If you run into issues, please first try resetting the values of
~hyperdrive-hyperdrives~ and ~hyperdrive-version-ranges~:

#+begin_src elisp
  (progn
    (setf hyperdrive-hyperdrives (make-hash-table :test #'equal))
    (persist-save 'hyperdrive-hyperdrives)
    (setf hyperdrive-version-ranges (make-hash-table :test #'equal))
    (persist-save 'hyperdrive-version-ranges))
#+end_src

Please ensure that your version of ~hyper-gateway~ (~M-x
hyperdrive-hyper-gateway-version~) is the latest version
([[https://github.com/RangerMauve/hyper-gateway/releases/][releases]]).

* Contributing/Getting help

You're welcome to join our public XMPP chat room!

- ~xmpp:discuss@conference.ushin.org~ ([[https://anonymous.cheogram.com/discuss@conference.ushin.org][Join anonymously from your browser]])
- ~#_bifrost_discuss_conference.ushin.org:aria-net.org~ (Matrix bridge)

Bugs can be submitted to the [[https://todo.sr.ht/~ushin/ushin][ushin issue tracker]]. Patches, comments or
questions can be submitted to the [[https://lists.sr.ht/~ushin/ushin][ushin public inbox]].

* Acknowledgments

[[https://github.com/alphapapa/][Adam Porter]] for rewriting
~hyperdrive.el~ and for his work on ~plz.el~.

[[https://mauve.moe/][Mauve Signweaver]] for their guidance into the
world of p2p as well as the development of ~hyper-gateway~.

[[https://protesilaos.com][Protesilaos Stavrou]] for design input and user-testing ~hyperdrive.el~.

[[https://karl-voit.at/][Karl Voit]] for his feedback which inspired the design of ~hyperdrive-mirror~.

[[https://www.sanityinc.com/][Steve Purcell]] and [[https://github.com/akirak][Akira Komamura]] for suggestions to improve our CI
build manifests.

[[https://eshelyaron.com/][Eshel Yaron]] for the suggestion to add on ~hyperdrive-menu-bar-mode~.

* Indices

** Keystroke index
:PROPERTIES:
:INDEX: ky
:END:

** Function index
:PROPERTIES:
:INDEX: fn
:END:

** Variable index
:PROPERTIES:
:INDEX: vr
:END:

** Concept index
:PROPERTIES:
:INDEX: cp
:END:

* GNU Free Documentation License

#+include: fdl.org

# Local Variables:
# sentence-end-double-space: t
# End:
